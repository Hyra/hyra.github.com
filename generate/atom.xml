<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Mindthecode</title>
 <link href="http://hyra.github.com/atom.xml" rel="self"/>
 <link href="http://hyra.github.com"/>
 <updated>2013-01-21T14:50:35+01:00</updated>
 <id>http://hyra.github.com</id>
 <author>
   <name>Stef van den Ham</name>
   <email>stef@mindthecode.com</email>
 </author>

 
 <entry>
   <title>Updated the PHPUnit CakePHP installer</title>
   <link href="http://hyra.github.com/updated-phpunit-cakephp-installer"/>
   <updated>2012-11-06T09:06:00+01:00</updated>
   <id>http://hyra.github.com/updated-phpunit-cakephp-installer</id>
   <content type="html">&lt;p&gt;Just a quick note, the CakePHP PHPUnit installer has been updated to use version 3.7.8. Go grab it &lt;a href=&quot;https://github.com/Hyra/PHPUnit-Cake2&quot;&gt;here&lt;/a&gt; if you are no fan of PEAR and want a self contained PHPUnit testing system.&lt;/p&gt;

&lt;p&gt;Works on Mac OSX, Linux and Windows.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Blogging with Octopress</title>
   <link href="http://hyra.github.com/blogging-with-octopress"/>
   <updated>2012-10-26T11:27:00+02:00</updated>
   <id>http://hyra.github.com/blogging-with-octopress</id>
   <content type="html">&lt;p&gt;As some of you may know, even though I don’t blog all that often, I do mess about with it a lot. Mostly on what makes it run. Switching between &lt;a href=&quot;http://croogo.org&quot;&gt;Croogo&lt;/a&gt;, a custom built &lt;a href=&quot;http://cakephp.org&quot;&gt;CakePHP&lt;/a&gt; site, &lt;a href=&quot;http://wordpress.org&quot;&gt;Wordpress&lt;/a&gt; .. and back again.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;For some reason none of them really seemed what I wanted. Croogo is cool enough, but actually adding posts is a hassle, and theming the thing was more of a puzle. Wordpress does the blogging thing really well, but it always feels ugly, and I had to rely on various plugins to make my post-flow work. I like writing in &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;. There’s a couple of Markdown plugins for Wordpress, but I would still have to copy paste stuff in webinterface, and had to hack it to allow for code-snippet sharing.&lt;/p&gt;

&lt;h3 id=&quot;enter-octopress&quot;&gt;Enter Octopress&lt;/h3&gt;

&lt;p&gt;I somehow stumbled upon &lt;a href=&quot;http://octopress.org&quot;&gt;Octopress&lt;/a&gt; earlier this week, and decided to give it a go. Short conclusion: &lt;em&gt;It’s awesome&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I won’t go into all of the features, as that’s nicely explained on their site, but basically it allows for this workflow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Run &lt;code&gt;rake preview&lt;/code&gt; in the background&lt;/li&gt;
  &lt;li&gt;Write my posts in &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;, with some settings in the top such as title, publish date, etc.&lt;/li&gt;
  &lt;li&gt;Hit save&lt;/li&gt;
  &lt;li&gt;See the changes in the browser&lt;/li&gt;
  &lt;li&gt;When happy, &lt;code&gt;rake deploy&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, the deploy function is very awesome. It automatically generate the site to a &lt;code&gt;public&lt;/code&gt; folder, commits the whole thing to your git repository, and pushes it. When linked to a Github Pages site it will auto update your site.&lt;/p&gt;

&lt;p&gt;So yeah, this is good stuff, as I can just write my plain text files like I want to, and without any further webinterfacing and option clicking I can publish new articles.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Spotify Boilerplate App</title>
   <link href="http://hyra.github.com/spotify-boilerplate-app"/>
   <updated>2012-09-18T07:59:00+02:00</updated>
   <id>http://hyra.github.com/spotify-boilerplate-app</id>
   <content type="html">&lt;p&gt;A while ago we were proud to be releasing 2 of the very first Spotify Apps in the Netherlands at &lt;a href=&quot;http://noprotocol.nl&quot; title=&quot;NoProtocol&quot; target=&quot;_blank&quot;&gt;NoProtocol&lt;/a&gt;. For a long time since I’ve been planning on creating a Boilerplate in which we could put all the best practices and redo some stuff in hindsight.&lt;/p&gt;

&lt;p&gt;And finally, it’s here! You can grab it at &lt;a href=&quot;https://github.com/Hyra/Spotify-Boilerplate&quot; title=&quot;https://github.com/Hyra/Spotify-Boilerplate&quot; target=&quot;_blank&quot;&gt;https://github.com/Hyra/Spotify-Boilerplate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For a bit more in-depth information, read on ..&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The Boilerplate project aims to provide a foundation upon which you can start building Spotify Apps. It takes away the hassle of writing the necessary boilerplate code and is structured so you can start developing straight away.&lt;/p&gt;

&lt;p&gt;I will add to it as I stumble upon free time, but feel free to open a Pull Request or submit an issue for a suggestion&lt;/p&gt;

&lt;h2 id=&quot;some-of-the-features&quot;&gt;Some of the features&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Small footprint&lt;/li&gt;
  &lt;li&gt;Automatic Tab Handling&lt;/li&gt;
  &lt;li&gt;Automatic Deeplink handling&lt;/li&gt;
  &lt;li&gt;Automatic Cover Loading for playlists (mosaics)&lt;/li&gt;
  &lt;li&gt;Online/offline status tracking and content switching&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-to-set-it-up-on-your-mac&quot;&gt;How to set it up (on your Mac)&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Sign up for a developer account on Spotify&lt;/li&gt;
  &lt;li&gt;Open Terminal, and if it doesn’t exist yet &lt;code&gt;mkdir ~/Spotify&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;cd ~/Spotify&lt;/li&gt;
  &lt;li&gt;git clone git@github.com:Hyra/Spotify-Boilerplate.git&lt;/li&gt;
  &lt;li&gt;Download the latest version of Spotify&lt;/li&gt;
  &lt;li&gt;Open Spotify and type &lt;code&gt;spotify:app:boilerplate&lt;/code&gt; in the search bar&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;whats-in-the-boilerplate&quot;&gt;What’s in the Boilerplate&lt;/h2&gt;

&lt;p&gt;The aim is to keep the Boilerplate as clean as possible, while giving all the tools to quickly develop your app.&lt;/p&gt;

&lt;h3 id=&quot;how-to-work-with-it-the-short-version&quot;&gt;How to work with it (the short version)&lt;/h3&gt;

&lt;p&gt;What you want to look for is &lt;code&gt;js/app.js&lt;/code&gt;. Once index.html has been loaded by Spotify it will fire off our Sammy instance:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/home&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here you can also handle any other bootstrapping you might want to do.&lt;/p&gt;

&lt;p&gt;Next up, the Sammy route gets invoked:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;home&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ctxt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;loadSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ctxt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;news&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/templates/home.html&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;js/_example_data.json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Callback actions&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is what you will most likely expand on for your app. The route loads a Mustache template into the DOM, parses it, asynch-y fill in the Spotify details, and cache it. After that it will run your callback actions, should you need to.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;loadSection&lt;/code&gt; takes 5 parameters at the moment:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ctxt&lt;/strong&gt; A reference to the &lt;code&gt;Sammy.Context&lt;/code&gt; which was passed to the route&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ID&lt;/strong&gt; A unique identifier for the content which is used as a cache-key&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Template File&lt;/strong&gt; location to the Mustache template&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JSON Location&lt;/strong&gt; location to the JSON you want to use. This is useful if you want to connect your app with a (RESTful) web service to feed content to your app. NOTE: If you use absolute URLs here you should add the domains to your &lt;code&gt;manifest.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Callback&lt;/strong&gt; This callback function you can use to do your post-processing&lt;/p&gt;

&lt;h3 id=&quot;dependencies&quot;&gt;Dependencies&lt;/h3&gt;

&lt;p&gt;The boilerplate relies on a couple of libraries:&lt;/p&gt;

&lt;p&gt;Sammy.js for the routing, templating parsing and content swapping. It’s just an awesome little tool&lt;/p&gt;

&lt;p&gt;jQuery as we’ve all become used to it at some point&lt;/p&gt;

&lt;p&gt;Mustache as a template handler. This can just as well be any of the other gazillion templating engines out there, so feel free to hack your favourite in.&lt;/p&gt;

&lt;h3 id=&quot;roadmap&quot;&gt;Roadmap&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Add more features/functionality regarding the Spotify API&lt;/li&gt;
  &lt;li&gt;Make the loadSection and Sammy integration a bit more seamless and less explicit&lt;/li&gt;
  &lt;li&gt;Spend more time documenting and writing how-to’s&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Good times with Watchr, Coffeescript and LESS</title>
   <link href="http://hyra.github.com/good-times-with-watchr-coffeescript-and-less"/>
   <updated>2012-05-16T07:59:00+02:00</updated>
   <id>http://hyra.github.com/good-times-with-watchr-coffeescript-and-less</id>
   <content type="html">&lt;p&gt;I have been working on a pure HTML front-end for one of the pet projects I’m doing. A lot of fun, but while developing, running the terminal commands to compile both the .less and .coffee files gets a tad tedious. &lt;a href=&quot;https://github.com/mynyml/watchr&quot;&gt;“Watchr”&lt;/a&gt; to the rescue! With this little gem you can watch specific folders or file extensions and run commands based on the files you watch.&lt;/p&gt;

&lt;p&gt;Here is how I got it set up now ..&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;installing-watchr&quot;&gt;Installing watchr&lt;/h2&gt;

&lt;p&gt;First of all we need to get the Watchr gem installed. Assuming you have a Mac and got XCode (or at least the tools) installed, this is pretty simple:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install watchr
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;installing-coffeescript&quot;&gt;Installing coffeescript&lt;/h2&gt;

&lt;p&gt;Another easy one ..&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g coffee-script
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Don’t forget the &lt;code&gt;-g&lt;/code&gt; flag as you (probably) want it to be installed globally.&lt;/p&gt;

&lt;h2 id=&quot;installing-the-less-compiler&quot;&gt;Installing the LESS compiler&lt;/h2&gt;

&lt;p&gt;You got the hang of it now, it’s as easy as ..&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g less
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;the-fun-part&quot;&gt;The fun part!&lt;/h2&gt;

&lt;p&gt;Now we’re ready for the fun bit, setting up watchr to do some automagic stuff.&lt;/p&gt;

&lt;p&gt;I have a typical folder structure, with the exception of a new &lt;code&gt;_src&lt;/code&gt; folder which will contain all the raw coffeescript and less files.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/index.html
/css
/js
/img
/_src
    /less
    /coffee
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Watchr works with a config file, which basically tells it what to watch for, and what to do if it finds any changes. I placed the file inside the &lt;code&gt;_src&lt;/code&gt; folder and named it &lt;code&gt;watchr.rb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here’s my config file at the moment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def compile_less
    %x[lessc less/bootstrap/bootstrap.less ../css/main.css --yui-compress]
end

def compile_coffee
    %x[coffee -c -j ../js/app.js coffee/]
end

def do_growl(message)
    growlnotify = `which growlnotify`.chomp
  title = &quot;Watchr Message&quot;
  passed = message.include?('0 failures, 0 errors')
  image = passed ? &quot;~/.watchr_images/passed.png&quot; : &quot;~/.watchr_images/failed.png&quot;
  severity = passed ? &quot;-1&quot; : &quot;1&quot;
  options = &quot;-w -n Watchr --image '#{File.expand_path(image)}'&quot;
  options &amp;lt;&amp;lt; &quot; -m '#{message}' '#{title}' -p #{severity}&quot;
  system %(#{growlnotify} #{options} &amp;amp;)
end

do_growl &quot;Watching folders and waiting for changes ..&quot;

watch('less/*') { |m|
    # Recompile LESS files
    compile_less
    do_growl &quot;LESS Compiled and Compressed!&quot;
}

watch('coffee/*') { |m|
    # Recompile Coffeescripts
    compile_coffee
    do_growl &quot;Coffeescripts compiled and concatenated!&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see at the bottom I’m watching the 2 folders seperately, as I want to run different commands for them. For the project I’m working on I’m using Twitter Bootstrap, so rather than compiling all the .less files to seperate .css files I just want to compiled bootstrap.less as that @imports all the things it needs. When it’s done with that it yui-compresses the lot and writes the output to &lt;code&gt;css/main.css&lt;/code&gt;. Pretty cool!&lt;/p&gt;

&lt;p&gt;The compile_coffee command does something pretty similar. Whenever a .coffee file in the coffee folder changes it will compile them all and combine the output (notice the &lt;code&gt;-j&lt;/code&gt; flag) and write it to &lt;code&gt;js/app.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To get the show on the road, cd to the &lt;code&gt;_src&lt;/code&gt; folder, and run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;watchr watchr.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may have noticed the &lt;code&gt;do_growl&lt;/code&gt; function, which doesn’t really add value except that it’s just cool to get a Growl message whenever it has done it’s thing. To get that bit working you have to install &lt;a href=&quot;http://growl.info/extras.php#growlnotify&quot;&gt;“Growl Notify”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you’re not that interested, or you don’t have a Mac with Growl simply remove the function and the do_growl calls from the watch patterns.&lt;/p&gt;

&lt;p&gt;I’m sure I could optimize this a bit, and add variables for output folders and options, but for now it’s simple, working, and pretty damn cool.&lt;/p&gt;

&lt;p&gt;Let me know how you get your watchr set up!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Format associative JSON to work with Knockout.js</title>
   <link href="http://hyra.github.com/format-associative-json-to-work-with-knockout-js"/>
   <updated>2012-05-09T10:43:00+02:00</updated>
   <id>http://hyra.github.com/format-associative-json-to-work-with-knockout-js</id>
   <content type="html">&lt;p&gt;I recently started creating a RESTful API in CakePHP to work with a Knockout.js frontend.&lt;/p&gt;

&lt;p&gt;While Knockout.js is a lot of fun, it does expect your JSON to be in a certain format.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Take the following response from a simple &lt;code&gt;find&lt;/code&gt; action:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;Projects&quot;: [
    {
        &quot;Project&quot;: {
            &quot;id&quot;: &quot;151&quot;,
            &quot;title&quot;: &quot;Een ander project&quot;,
            &quot;slug&quot;: &quot;een-ander-project&quot;,
            &quot;description&quot;: &quot;dsfdsfs&quot;,
            &quot;tasks_count&quot;: &quot;2&quot;,
            &quot;tasks_backlog&quot;: &quot;2&quot;,
            &quot;tasks_open&quot;: &quot;0&quot;,
            &quot;tasks_closed&quot;: &quot;0&quot;,
            &quot;duedate&quot;: &quot;2012-04-09&quot;,
            &quot;created&quot;: &quot;2012-04-09 13:52:19&quot;,
            &quot;modified&quot;: &quot;2012-04-09 13:52:19&quot;
        },
        &quot;Task&quot;: [ ]
    },
    {
        &quot;Project&quot;: {
            &quot;id&quot;: &quot;152&quot;,
            &quot;title&quot;: &quot;Een ander project&quot;,
            &quot;slug&quot;: &quot;een-ander-project-1&quot;,
            &quot;description&quot;: &quot;dsfdsfs&quot;,
            &quot;tasks_count&quot;: null,
            &quot;tasks_backlog&quot;: null,
            &quot;tasks_open&quot;: null,
            &quot;tasks_closed&quot;: null,
            &quot;duedate&quot;: &quot;2012-04-09&quot;,
            &quot;created&quot;: &quot;2012-04-09 13:55:30&quot;,
            &quot;modified&quot;: &quot;2012-04-09 13:55:30&quot;
        },
        &quot;Task&quot;: [ ]
    },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is fine to work with in your typical View, but Knockout rather has a nested format, and doesn’t like the leading &lt;code&gt;Project&lt;/code&gt; nodes. You could write custom parsers in Knockout, but would quickly become a hell to maintain.&lt;/p&gt;

&lt;p&gt;Instead, I wrote a little function to reformat the response to get the result Knockout likes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function formatResponse($data) {
    $ret = array();
    foreach($data as $key) {
        $keys = array_keys($key);
        $t = $key[$keys[0]];
        for($i=1; $i&amp;lt;count($keys); $i++) {
            $t[Inflector::pluralize(strtolower($keys[$i]))] = $key[$keys[$i]];
        }
        $ret[] = $t;
    }

    return $ret;
}

$projects = $this-&amp;gt;Project-&amp;gt;find('all');
$projects = $this-&amp;gt;formatResponse($projects);
$this-&amp;gt;set(compact('projects'));
$this-&amp;gt;set('_serialize', array('projects'));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will reformat the Projects response to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;projects&quot;: [
    {
        &quot;id&quot;: &quot;151&quot;,
        &quot;title&quot;: &quot;Een ander project&quot;,
        &quot;slug&quot;: &quot;een-ander-project&quot;,
        &quot;description&quot;: &quot;dsfdsfs&quot;,
        &quot;tasks_count&quot;: &quot;2&quot;,
        &quot;tasks_backlog&quot;: &quot;2&quot;,
        &quot;tasks_open&quot;: &quot;0&quot;,
        &quot;tasks_closed&quot;: &quot;0&quot;,
        &quot;duedate&quot;: &quot;2012-04-09&quot;,
        &quot;created&quot;: &quot;2012-04-09 13:52:19&quot;,
        &quot;modified&quot;: &quot;2012-04-09 13:52:19&quot;,
        &quot;tasks&quot;: [ ]
    },
    {
        &quot;id&quot;: &quot;152&quot;,
        &quot;title&quot;: &quot;Een ander project&quot;,
        &quot;slug&quot;: &quot;een-ander-project-1&quot;,
        &quot;description&quot;: &quot;dsfdsfs&quot;,
        &quot;tasks_count&quot;: null,
        &quot;tasks_backlog&quot;: null,
        &quot;tasks_open&quot;: null,
        &quot;tasks_closed&quot;: null,
        &quot;duedate&quot;: &quot;2012-04-09&quot;,
        &quot;created&quot;: &quot;2012-04-09 13:55:30&quot;,
        &quot;modified&quot;: &quot;2012-04-09 13:55:30&quot;,
        &quot;tasks&quot;: [ ]
    },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way I don’t have to worry about modifying the core of how Knockout.js works with JSON, and focus on developing the front-end of my app instead.&lt;/p&gt;

&lt;p&gt;It will probably be classier to put the function in something like an &lt;code&gt;afterFind&lt;/code&gt;, but for now it will do nicely.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Using Sessions in PHPUnit Tests with CakePHP</title>
   <link href="http://hyra.github.com/using-sessions-in-phpunit-tests-with-cakephp"/>
   <updated>2012-02-24T11:43:00+01:00</updated>
   <id>http://hyra.github.com/using-sessions-in-phpunit-tests-with-cakephp</id>
   <content type="html">&lt;p&gt;I was breaking my head over failing unit tests when trying to test a simple Controller that was saving a new record.&lt;/p&gt;

&lt;p&gt;Turned out it was failing only on the command line, while the webversion was passing all the tests.&lt;/p&gt;

&lt;p&gt;Luckily, the solution was simple ..&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The PHPUnit command line suite apparently outputs contents early, before the session gets initiated.&lt;/p&gt;

&lt;h2 id=&quot;solution-1&quot;&gt;Solution 1&lt;/h2&gt;

&lt;p&gt;Add –stderr to the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cake testsuite app Controller/YourFancyController --stderr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will pass the tests again, as it doesn’t output contents early to &lt;code&gt;STDOUT&lt;/code&gt;. The only “problem” is you won’t see the awesome green and red colors in the CLI output anymore.&lt;/p&gt;

&lt;h2 id=&quot;solution-2&quot;&gt;Solution 2&lt;/h2&gt;

&lt;p&gt;This is the one I use, as it brings the colors back.&lt;/p&gt;

&lt;p&gt;As I’m using my self-contained PHPUnit Install, as found on Github @ &lt;a href=&quot;https://github.com/hyra/PHPUnit-Cake2&quot;&gt;PHPUnit-Cake2&lt;/a&gt; I am able to edit the following file: &lt;code&gt;Vendor/PHPUnit/Autoload.php&lt;/code&gt; At the very top of this file, initialize the session early:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;session_start();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will pass the tests again, and even better, bring back the colors!&lt;/p&gt;

&lt;p&gt;Maybe the session initialization can be done early by putting it in a file by CakePHP itself, but haven’t found the right place yet. Any suggestions?&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Spotify Preview Build expired</title>
   <link href="http://hyra.github.com/spotify-preview-build-expired"/>
   <updated>2012-02-11T17:16:00+01:00</updated>
   <id>http://hyra.github.com/spotify-preview-build-expired</id>
   <content type="html">&lt;p&gt;Today I decided to tinker some more on our Spotify App, only to find that the Preview Build had expired, and was not gonna launch. Period. Great, so now what?&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;small-update&quot;&gt;Small update&lt;/h2&gt;

&lt;p&gt;From IRC:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;chiel: Hi guys, just a small update about the expired preview build we're aware of the issue and will put a new one up today however, we're in San Francisco for a hackday, where it is now 8.30am, so bear with us for a moment.&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;back-to-basics&quot;&gt;Back to basics&lt;/h2&gt;

&lt;p&gt;I downloaded the normal user version, and obviously my application didn’t fully work. Most noticably the &lt;code&gt;application&lt;/code&gt; node had disappeared from the &lt;code&gt;models&lt;/code&gt; class, even though it’s still present at the developer resource page.&lt;/p&gt;

&lt;p&gt;This means one can’t change tabs in the following way anymore:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;application.observe(models.EVENT.ARGUMENTSCHANGED, handleArgs);

function handleArgs() {
    var args = models.application.arguments;
    $(&quot;.section&quot;).hide();   // Hide all sections
    $(&quot;#&quot;+args[0]).show();  // Show current section
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;so-now-what&quot;&gt;So now what?&lt;/h2&gt;

&lt;p&gt;I did some digging, and noticed &lt;code&gt;sp.core&lt;/code&gt; has some eventListeners. After some fiddling I can now switch tabs again by doing the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sp.core.addEventListener('argumentsChanged', function() {
    $(&quot;.section&quot;).hide();                   // Hide all sections
    $(&quot;#&quot;+sp.core.getArguments()).show();   // Show current section
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothe most elegant, and I’ll probably be able to change it back to the original code when the new Preview Build comes out, but for now I can at least work on the App.&lt;/p&gt;

&lt;h2 id=&quot;broken&quot;&gt;Broken?&lt;/h2&gt;

&lt;p&gt;Any one else noticing things that have stopped working and found some workarounds? Do share below!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Updated LESS component for CakePHP</title>
   <link href="http://hyra.github.com/updated-less-component-for-cakephp"/>
   <updated>2012-02-05T10:28:00+01:00</updated>
   <id>http://hyra.github.com/updated-less-component-for-cakephp</id>
   <content type="html">&lt;p&gt;I decided to have a look at Twitter Bootstrap 2, and had it run through my LESS Component. I then realized the component didn’t support subfolders!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;So this is just to let you guys know I wrote a small tweak, and now it works perfectly :)&lt;/p&gt;

&lt;p&gt;If you have any other alterations you would like to see feel free to fork, or drop me a comment below.&lt;/p&gt;

&lt;p&gt;The new version: https://github.com/Hyra/less&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Loading external files in PHP the better way</title>
   <link href="http://hyra.github.com/loading-external-files-in-php-the-better-way"/>
   <updated>2011-12-06T19:37:00+01:00</updated>
   <id>http://hyra.github.com/loading-external-files-in-php-the-better-way</id>
   <content type="html">&lt;p&gt;Sometimes you run into “weird behavior” when using &lt;code&gt;file_get_contents&lt;/code&gt; in your code when retrieving external data. I noticed this for instance when accessing the Facebook Graph API the other day. When using file_get_contents the results were so much different than when using cUrl.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Sometimes even, it is disabled on your host for security reasons. So i’m making it a habbit to run everything through cUrl instead. Not just to get the “actual results”, but also since it’s a lot faster.&lt;/p&gt;

&lt;h2 id=&quot;faster-you-say&quot;&gt;Faster you say?&lt;/h2&gt;

&lt;p&gt;Indeed! Take this benchmark for instance, &lt;code&gt;file_get_contents&lt;/code&gt; vs &lt;code&gt;curl&lt;/code&gt; on google.com:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[1] =&amp;gt; Array   // 1 request to google.com
(
    [FGC] =&amp;gt;  0.4955058 // 38.88% slower
    [CURL] =&amp;gt; 0.3582108
)
[5] =&amp;gt; Array   // 5 requests to google.com
(
    [FGC] =&amp;gt;  2.2415568 // 24.44% slower
    [CURL] =&amp;gt; 1.7973249
)    
[10] =&amp;gt; Array  // 10 requests to google.com
(
    [FGC] =&amp;gt;  4.7877922 // 29.46% slower
    [CURL] =&amp;gt; 3.6951289
)    
[25] =&amp;gt; Array  // 25 requests to google.com
(
    [FGC] =&amp;gt;  10.932404 // 10.18% slower
    [CURL] =&amp;gt; 9.9168329
)    
[50] =&amp;gt; Array  // 50 requests to google.com
(
    [FGC] =&amp;gt;  22.535982 // 24.74% slower
    [CURL] =&amp;gt; 18.068931
)    
[100] =&amp;gt; Array // 100 requests to google.com
(
    [FGC] =&amp;gt;  44.685283 // 18.57% slower
    [CURL] =&amp;gt; 37.688820
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sure, it might not seem that big a difference. But imagine loading an external file being a big part of your (heavily) used application.&lt;/p&gt;

&lt;h2 id=&quot;got-an-example-&quot;&gt;Got an example ?&lt;/h2&gt;

&lt;p&gt;Sure, no worries. Rather than calling:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$data = file_get_contents('http://whatever.com/sheep.jpg');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you could do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function loadFile($url) {
    $ch = curl_init();

    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_URL, $url);

    $data = curl_exec($ch);
    curl_close($ch);

    return $data;
}

$data = loadFile('http://whatever.com/sheep.jpg');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you’re done.&lt;/p&gt;

&lt;h2 id=&quot;thoughts&quot;&gt;Thoughts?&lt;/h2&gt;

&lt;p&gt;Anyone else experiencing different results between cUrl and the builtin function? I’ve been googling what could cause this, but so far nothing conclusive.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>PHPUnit Installer updated to 3.6.4</title>
   <link href="http://hyra.github.com/phpunit-installer-updated-to-3-6-4"/>
   <updated>2011-11-29T12:12:00+01:00</updated>
   <id>http://hyra.github.com/phpunit-installer-updated-to-3-6-4</id>
   <content type="html">&lt;p&gt;Just a small update .. I updated the PHPUnit Installer Shell for CakePHP 2.0 to use version 3.6.4.&lt;/p&gt;

&lt;p&gt;All dependencies have been updated as well, so it’s 23% more awesome.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Installing PHPUnit manually for CakePHP 2.0</title>
   <link href="http://hyra.github.com/installing-phpunit-manually-for-cakephp-2-0"/>
   <updated>2011-11-11T16:50:00+01:00</updated>
   <id>http://hyra.github.com/installing-phpunit-manually-for-cakephp-2-0</id>
   <content type="html">&lt;p&gt;I was trying to get into Unit Testing a few months ago. It was a steep learning curve and eventually I gave myself a non-excuse and decided to wait for Cake 2.0 as that would have PHPUnit and it “wouldn’t make sense to learn SimpleTest” at that time.&lt;/p&gt;

&lt;p&gt;I intend to keep that promise and have been trying to get into Unit Testing for real this time. The first thing was also the most annoying so far: installing the &lt;em&gt;(&amp;amp;#(&lt;/em&gt;&amp;amp;. After completely messing up my local PEAR environment I gave up on the “official way” and wrote a &lt;code&gt;PHPUnit Installer Shell&lt;/code&gt; to install PHPUnit along with the Cake site.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;phpunit-locally&quot;&gt;PHPUnit locally?&lt;/h2&gt;

&lt;p&gt;Yes! I’m a fan of self-contained systems. Sure, installing PHPUnit through PEAR &lt;em&gt;should&lt;/em&gt; provide a systemwide tool, but when you’re working on multiple workstations and deploy to different hosting setups its just nice to know you have everything within reach. Besides, my MAMP setup on OSX Lion didn’t play nice with PEAR &lt;strong&gt;at all&lt;/strong&gt; so enough excuses to write an installer shell.&lt;/p&gt;

&lt;h2 id=&quot;what-it-does&quot;&gt;What it does&lt;/h2&gt;

&lt;p&gt;It’s quite simple really, it downloads all the files and folders that PHPUnit needs, makes them into a nice package and moves them into the &lt;code&gt;app&lt;/code&gt; folder, ready for you to play with!&lt;/p&gt;

&lt;h2 id=&quot;how-do-i-get-it&quot;&gt;How do I get it&lt;/h2&gt;

&lt;p&gt;I just pushed it to Github: &lt;a href=&quot;https://github.com/Hyra/PHPUnit-Cake2&quot;&gt;Get the installer Shell here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The README there provides you with the rest of the information.&lt;/p&gt;

&lt;p&gt;I’ll post some updates on my journey when I can, meanwhile: If you have any optimialisations, ideas on Unit Testing in general or some good pointers .. let me know!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Use GZip with PHP</title>
   <link href="http://hyra.github.com/use-gzip-with-php"/>
   <updated>2011-10-14T09:35:00+02:00</updated>
   <id>http://hyra.github.com/use-gzip-with-php</id>
   <content type="html">&lt;p&gt;I recently started using GZip headers in my websites and the results are simply amazing. Right up there with coffee, sneezing polar bears and green traffic lights.&lt;/p&gt;

&lt;p&gt;Nowadays, files are big. People used to optimize graphics and CSS stylesheets. This day and age we just don’t care anymore. At the same time bandwidth is getting more expensive and the mobile market is growing bigger. Not a good combination.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;enter-gzip&quot;&gt;Enter GZip&lt;/h2&gt;

&lt;p&gt;Adding GZip to your applications couldn’t be simpler, and using this compression to your output can reduce the amount of data being sent by around &lt;strong&gt;70-80%&lt;/strong&gt; for your average stylesheets. That’s what you call weight-loss.&lt;/p&gt;

&lt;p&gt;I recently built the backend of a mobile application, which relied on a JSON interface. Data being sent to the phone was around &lt;code&gt;250kb&lt;/code&gt;. Optimizing the content, only returning the bare minimum the phone needed to work resulted in the file being &lt;code&gt;197kb&lt;/code&gt;. So, I added the GZip compression and guess what. The resulting file was &lt;code&gt;14kb&lt;/code&gt;. Awesome.&lt;/p&gt;

&lt;h2 id=&quot;so-how-do-i-use-it&quot;&gt;So how do I use it&lt;/h2&gt;

&lt;p&gt;Simple. At the top of your PHP file you add the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@ob_start ('ob_gzhandler');
header('Content-type: text/html; charset: UTF-8');
header('Cache-Control: must-revalidate');
header(&quot;Expires: &quot; . gmdate('D, d M Y H:i:s', time() - 1) . ' GMT');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will tell the server to first zip the contents, before sending it back to the client, where it is deflated.&lt;/p&gt;

&lt;p&gt;The only caveat is that you must have &lt;code&gt;mod_gzip&lt;/code&gt; installed as an Apache module, but most hosting providers install this by default. Just make sure yours does too.&lt;/p&gt;

&lt;h2 id=&quot;as-a-cakephp-component&quot;&gt;As a CakePHP component&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://josediazgonzalez.com/&quot; title=&quot;Jose Gonzales&quot;&gt;Jose Gonzales&lt;/a&gt; made a nice little plugin to use GZip in your Cake Applications. Find it at &lt;a href=&quot;https://github.com/josegonzalez/gzip-component/&quot; title=&quot;CakePHP Gzip Component&quot;&gt;Github&lt;/a&gt; Basically, all you have to do is add the plugin to your &lt;code&gt;plugins&lt;/code&gt; folder, and then add the following to your &lt;code&gt;app_controller.php&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var $components = array('Gzip.Gzip');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you’re good to go.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Using LESS in CakePHP</title>
   <link href="http://hyra.github.com/using-less-in-cakephp"/>
   <updated>2011-09-10T12:15:00+02:00</updated>
   <id>http://hyra.github.com/using-less-in-cakephp</id>
   <content type="html">&lt;p&gt;I was a bit bored this morning with my previous Less component, so decided to rewrite the thing and added some new features such as caching. It’s pretty straightforward and simple to set up. If you can’t wait, the code is available &lt;a href=&quot;https://github.com/Hyra/less&quot;&gt;here&lt;/a&gt;. For more information, read on.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This little helper converts your .less files into .css without relying on Node.js&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;h3 id=&quot;clone&quot;&gt;Clone&lt;/h3&gt;

&lt;p&gt;Clone from github: in your plugin directory type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/Hyra/less.git less
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;submodule&quot;&gt;Submodule&lt;/h3&gt;

&lt;p&gt;Add as Git submodule: in your plugin directory type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule add https://github.com/Hyra/less.git less
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;manual&quot;&gt;Manual&lt;/h3&gt;

&lt;p&gt;Download as archive from github and extract to &lt;code&gt;app/plugins/less&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next, create a folder &lt;code&gt;less&lt;/code&gt; in &lt;code&gt;app/webroot/&lt;/code&gt; and apply &lt;code&gt;chmod 777&lt;/code&gt; to it.&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;In your &lt;code&gt;app_controller.php&lt;/code&gt; add the helper:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public $helpers = array('Less.Less');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now every &lt;code&gt;.less&lt;/code&gt; file from &lt;code&gt;webroot/less&lt;/code&gt; will be converted to its &lt;code&gt;.css&lt;/code&gt; equivalent in &lt;code&gt;webroot/css&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In your &lt;code&gt;default.ctp&lt;/code&gt; layout you can just use &lt;code&gt;echo $this-&amp;gt;Html-&amp;gt;css('your_css_file');&lt;/code&gt; as you always do&lt;/p&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Conversion happens on every request while in development mode &lt;code&gt;(debug at 0)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again, it’s not much .. but I like simple things that make working on projects more fun, so it’s all good.&lt;/p&gt;

&lt;p&gt;I probably should update the helper again soon to make it work with CakePHP 2.0, but haven’t decided when to make the switch yet. Then again, you guys can always fork and help out, of course ;)&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Using Markdown in CakePHP</title>
   <link href="http://hyra.github.com/using-markdown-in-cakephp"/>
   <updated>2011-07-10T18:06:00+02:00</updated>
   <id>http://hyra.github.com/using-markdown-in-cakephp</id>
   <content type="html">&lt;p&gt;Markdown rocks. I lately fell in love with it when I was setting up this very blog. You can just write easy-to-read and easy-to-write plain text files, and Markdown takes care of the rest.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;For this blog I had used a Markdown script I found that parses plain text and outputs it as HTML. It allows me to write posts in a simple/plain format and just pump it into the database &lt;code&gt;as is&lt;/code&gt;. For a while I wanted to make it into a more solid CakePHP Helper. And today I did. Setting it up couldn’t be simpler, and using it is a matter of adding it as a call in your views.&lt;/p&gt;

&lt;p&gt;I put it on Github @ &lt;a href=&quot;https://github.com/Hyra/markdown&quot; title=&quot;CakePHP Markdown Github&quot;&gt;Markdown for CakePHP&lt;/a&gt; along with the necessary instructions and usage example.&lt;/p&gt;

&lt;p&gt;Hope you enjoy it, and if you have any suggestions or tips, don’t hesitate to leave a comment or Fork it.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>How to remove a SubModule from your Git repository</title>
   <link href="http://hyra.github.com/how-to-remove-a-submodule-from-your-git-repository"/>
   <updated>2011-05-26T19:44:00+02:00</updated>
   <id>http://hyra.github.com/how-to-remove-a-submodule-from-your-git-repository</id>
   <content type="html">&lt;p&gt;Submodules are awesome. Adding them is easy enough. But how about getting rid of them again? In this short post I’ll share how to do just that.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;We all know having submodules in Git is very handy. You don’t have to check all of the code in, just the reference and, when needed, initialize them.&lt;/p&gt;

&lt;h2 id=&quot;traces-of-submodules&quot;&gt;Traces of submodules&lt;/h2&gt;

&lt;p&gt;When installing a submodule in Git it does a couple of things. It adds a &lt;code&gt;record&lt;/code&gt; to your &lt;code&gt;.gitmodules&lt;/code&gt; file. When this file doesn’t exist it will create one. An example of this is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[submodule &quot;some/nice/folder&quot;]
    path = some/nice/folder
    url = git://github.com/your_idol/awesome.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Secondly, it adds the URLs/mappings to your &lt;code&gt;.git/config&lt;/code&gt; file. This is done when you use &lt;code&gt;git init submodule&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Last but not least, it adds references to the submodule in your commits.&lt;/p&gt;

&lt;h2 id=&quot;fine-but-how-do-i-get-rid-of-them&quot;&gt;Fine, but how do I get rid of them?&lt;/h2&gt;

&lt;p&gt;The first two traces are easy enough to remove. Just open up &lt;code&gt;.gitmodules&lt;/code&gt; and remove the reference to it. Next, open up &lt;code&gt;.git/config&lt;/code&gt; and remove the mappings there as well. Last, but not least, use the following command from the root directory of your git repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git rm --cached path/to/submodule
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that you have to leave out the trailing slash, else the command will moan about it.&lt;/p&gt;

&lt;p&gt;And that’s it! Your submodule is gone.&lt;/p&gt;

&lt;p&gt;Hope this helps anyone.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How to handle multiple domains with CakePHP</title>
   <link href="http://hyra.github.com/how-to-handle-multiple-domains-with-cakephp"/>
   <updated>2011-05-22T22:49:00+02:00</updated>
   <id>http://hyra.github.com/how-to-handle-multiple-domains-with-cakephp</id>
   <content type="html">&lt;p&gt;Lately, we’ve been working with multiple environments/servers for our websites to be able to have them approved by clients before going live. However, following set up can also work nicely when you develop your sites locally and don’t want to keep changing the configuration every time you upload it.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;setting-up-the-database-config-file&quot;&gt;Setting up the database config file&lt;/h2&gt;

&lt;p&gt;So, what changes in your config? Not all that much. Let’s have a look at the default database.php config file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class DATABASE_CONFIG {

    var $default = array(
    'driver' =&amp;gt; 'mysql',
    'persistent' =&amp;gt; false,
    'host' =&amp;gt; 'localhost',
    'login' =&amp;gt; 'user',
    'password' =&amp;gt; 'password',
    'database' =&amp;gt; 'database_name',
    'prefix' =&amp;gt; '',
    );

    var $test = array(
    'driver' =&amp;gt; 'mysql',
    'persistent' =&amp;gt; false,
    'host' =&amp;gt; 'localhost',
    'login' =&amp;gt; 'user',
    'password' =&amp;gt; 'password',
    'database' =&amp;gt; 'test_database_name',
    'prefix' =&amp;gt; '',
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;$default&lt;/code&gt; database config is used when you don’t specify anything. The &lt;code&gt;$test&lt;/code&gt; database is used by SimpleTest. Let’s say you want to have a &lt;code&gt;local&lt;/code&gt; environment and one for when you’re on your live/production server. Below is the database config I use&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class DATABASE_CONFIG {

    var $local = array(
        'driver' =&amp;gt; 'mysql',
        'persistent' =&amp;gt; false,
        'encoding' =&amp;gt; 'utf8',
        'host' =&amp;gt; 'localhost',
        'login' =&amp;gt; 'root',
        'password' =&amp;gt; 'root',
        'database' =&amp;gt; '',
        'prefix' =&amp;gt; '',
        'port' =&amp;gt; '/Applications/MAMP/tmp/mysql/mysql.sock',
    );

    var $production = array(
        'driver' =&amp;gt; 'mysql',
        'persistent' =&amp;gt; false,
        'encoding' =&amp;gt; 'utf8',
        'host' =&amp;gt; 'localhost',
        'login' =&amp;gt; '',
        'password' =&amp;gt; '',
        'database' =&amp;gt; '',
        'prefix' =&amp;gt; '',
        'port' =&amp;gt; '',
    );

    public function __construct() {
        if(isset($_SERVER['SERVER_NAME'])) {
            switch($_SERVER['SERVER_NAME']) {
                // Are we working locally?
                case 'www.YOURLOCALURL.com':
                    $this-&amp;gt;default = $this-&amp;gt;local;
                    Configure::write('debug', 2);
                    break;
                case 'www.YOURLIVEURL.com':
                    $this-&amp;gt;default = $this-&amp;gt;production;
                    Configure::write('debug', 0);
                    break;
                default:
                    $this-&amp;gt;default = $this-&amp;gt;production;
                    Configure::write('debug', 0);
                    break;
            }
        } else {
            // If there's no SERVER_NAME we're probably using bake from the command line, so use local
            $this-&amp;gt;default = $this-&amp;gt;local;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see we check the &lt;code&gt;$_SERVER['SERVER_NAME']&lt;/code&gt; . Locally I like to work with &lt;code&gt;dev.domain.com&lt;/code&gt; domains, but if you’re using some sort of &lt;code&gt;localhost&lt;/code&gt; structure this will work fine as well. So, depending on the server(name) you’re on the correct database credentials are put into the &lt;code&gt;$default&lt;/code&gt; config. Obviously, you can extend the database configs as much as you want. We usually work with 4 arrays: local, development, staging and production. As a bonus, we can set the &lt;code&gt;debug value&lt;/code&gt; for these environments accordingly as well.&lt;/p&gt;

&lt;h2 id=&quot;thoughts&quot;&gt;Thoughts?&lt;/h2&gt;

&lt;p&gt;I have been considering putting this logic in the &lt;code&gt;bootstrap.php&lt;/code&gt;, but not sure if this is where one would want this logic. Do you guys use a similar setup, or know ways to improve or extend this? Let me know in the comments!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Using SASS in your next CakePHP project</title>
   <link href="http://hyra.github.com/using-sass-in-your-next-cakephp-project"/>
   <updated>2011-04-14T22:49:00+02:00</updated>
   <id>http://hyra.github.com/using-sass-in-your-next-cakephp-project</id>
   <content type="html">&lt;p&gt;I heard a lot about SASS, mostly a lot of people raving about how it was the best thing since chocolate. When I first saw some examples I thought the idea was good, but didn’t see the point of learning a new syntax in order to not having to use the CSS syntax. Because, honestly, how does typing some curly brackets and semicolons hurt?&lt;/p&gt;

&lt;p&gt;I did like the idea of inheretance by indentation though. By indenting subsequent selectors it saves a lot of repetitive class assigning and declarations. But I hate adding extra layers onto things. It just feels clunky and wrong. But with Compass your .sass files get compiled to proper CSS files that reside in your /webroot/css folder. Cool! How? Read on.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;sass&quot;&gt;SASS&lt;/h2&gt;

&lt;p&gt;SASS is an abbrevation of &lt;a href=&quot;http://sass-lang.com/&quot; title=&quot;Sass - Syntactically Awesome Stylesheets&quot;&gt;Syntactically Awesome Style Sheets&lt;/a&gt;. While I don’t really agree with the Syntactially Awesome bit, it IS awesome in that it relies on your syntax. It supports nested rules, selector inheretance, mixins, variables, and even more.&lt;/p&gt;

&lt;h2 id=&quot;installing-compass&quot;&gt;Installing Compass&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://compass-style.org/&quot; title=&quot;Compass&quot;&gt;Compass&lt;/a&gt; is basically an authoring framework which you install that manages your SASS files and offers plugins supporting CSS frameworks such as 960.gs, Susy and Blueprint. It runs from the command line and is just awesome.&lt;/p&gt;

&lt;p&gt;For the Mac users it’s easy. Open up the Terminal and go:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install compass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will utilize Ruby to install Compass for you along with Sass.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-compass-to-work-with-cakephp&quot;&gt;Setting up Compass to work with CakePHP&lt;/h2&gt;

&lt;p&gt;Now for the fun part, getting Compass to work with Cake! Open up the Terminal again and do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd &amp;lt;your project folder&amp;gt;
$ mkdir sass
$ cs sass
$ touch config.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This sass dir will be our home base for the SASS-stuff. Edit the config.rb file we just created and put in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http_path = &quot;/&quot;
sass_dir = 'src'
css_dir = '../app/webroot/css'
images_dir = '../app/webroot/img'
javascripts_dir = '../app/webroot/js'
http_stylesheets\_path = 'css'
http_javascripts\_path = 'js'
http_images\_path = 'img'
environment = :development
output_style = :compressed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This basically tells Compass where we will have our SASS files (sass_dir) and to save the compiled CSS files and where the other diectories are. Not the output_style. This tells Compass how to compile them. I usually have it on :expanded during development so it’s easier on the eyes when opening the CSS file.&lt;/p&gt;

&lt;p&gt;Now, we’re good to go. Go back to the Terminal, and in your sass-directory, type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ compass install blueprint/semantic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is just an example. You can use whatever framework you feel comfortable with, or use the compass default project ones. You will notice the ‘src’ folder has been created and you have a few Sass files to work on.&lt;/p&gt;

&lt;p&gt;I usually create a file &lt;code&gt;\_base.sass&lt;/code&gt; in &lt;code&gt;src/partials&lt;/code&gt; and in screen.scss add:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@import 'partials/base';
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the underscore in the filename, but not in the import.&lt;/p&gt;

&lt;p&gt;In the Terminal, still in your &lt;code&gt;sass&lt;/code&gt; directory, type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ compass watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will run Compass in watch-mode and when it detects any changes in the &lt;code&gt;src&lt;/code&gt; directory, it will automagically save the compiled files to webroot/css&lt;/p&gt;

&lt;p&gt;Awesome! So open up your &lt;code&gt;\_base.sass&lt;/code&gt;, start typing Sass, and when you hit Save it will have an awesome stylesheet in your &lt;code&gt;css&lt;/code&gt; directory.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Setting up CakePHP with MAMP Pro on Mac OSX</title>
   <link href="http://hyra.github.com/setting-up-cakephp-with-mamp-pro-on-mac-osx"/>
   <updated>2011-04-11T16:00:00+02:00</updated>
   <id>http://hyra.github.com/setting-up-cakephp-with-mamp-pro-on-mac-osx</id>
   <content type="html">&lt;p&gt;I’d like to use my first post to describe how I set up new projects in a simple way that works best for me. My setup is pretty straight-forward, really. I know some people who mess about with include-paths so they can run multiple &lt;em&gt;apps&lt;/em&gt; on one cake-install, but since I work for various clients and even more various projects I like my project folders to be self-contained.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;downloading-cakephp&quot;&gt;Downloading CakePHP&lt;/h2&gt;

&lt;p&gt;Easy enough. Grab a fresh copy of &lt;a href=&quot;https://github.com/cakephp/cakephp/downloads&quot;&gt;CakePHP @ Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unzip the package and copy the extracted folder to your Sites directory (mine is in /Users/Hyra/Sites) and rename the folder to the project you want to work on. For example: www.fantasticnewsite.org&lt;/p&gt;

&lt;h2 id=&quot;setting-up-cakephp&quot;&gt;Setting up CakePHP&lt;/h2&gt;

&lt;p&gt;I won’t go through the all of the options as it’s perfectly documented &lt;a href=&quot;http://book.cakephp.org/#!/view/912/Installation&quot; title=&quot;The Manual :: 1.3 Collection&quot;&gt;here at the CakePHP Book&lt;/a&gt; but what I usually do is the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Rename /app/config/database.php.default to /app/config/database.php and fill in the database credentials in $default&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open up the Terminal and run (for example):&lt;/p&gt;

    &lt;p&gt;chmod 777 ~/Sites/www.fantasticnewsite.org/app/tmp&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open up /app/config/core.php and change the values for:&lt;/p&gt;

    &lt;p&gt;Security.salt&lt;/p&gt;

    &lt;p&gt;Security.cipherSeed&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s it really. Of course, there’s a bunch of extra stuff you can set up, but that’s all outlined &lt;a href=&quot;http://book.cakephp.org/#!/view/915/Advanced-Installation&quot; title=&quot;The Manual :: 1.3 Collection&quot;&gt;here&lt;/a&gt; if you want to read up on it.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-mamp-pro&quot;&gt;Setting up MAMP Pro&lt;/h2&gt;

&lt;p&gt;Optional. If you have any form of AMP setup already running, by all means, skip this step. I just happen to run MAMP Pro for ease and comfort.&lt;/p&gt;

&lt;p&gt;Open up MAMP Pro and go to the Hosts tab and simply:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Hit the plus-sign&lt;/li&gt;
  &lt;li&gt;Give the site a name at which you want to access it locally&lt;/li&gt;
  &lt;li&gt;Browse to the location you want the site to be located&lt;/li&gt;
  &lt;li&gt;Hit apply&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By this point you should be able to point your &lt;a href=&quot;http://www.mozilla.com/en-US/firefox/new/&quot; title=&quot;Mozilla | Firefox web browser &amp;amp; Thunderbird email client&quot;&gt;favourite browser&lt;/a&gt; to your fresh local domain at http://www.fantasticnewsite.org&lt;/p&gt;

</content>
 </entry>
 
 
</feed>
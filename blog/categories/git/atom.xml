<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Mindthecode - Rambling about code]]></title>
  <link href="http://mindthecode.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://mindthecode.com/"/>
  <updated>2012-10-26T20:46:19+02:00</updated>
  <id>http://mindthecode.com/</id>
  <author>
    <name><![CDATA[Stef van den Ham]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to remove a SubModule from your Git repository]]></title>
    <link href="http://mindthecode.com/how-to-remove-a-submodule-from-your-git-repository/"/>
    <updated>2011-05-26T19:44:00+02:00</updated>
    <id>http://mindthecode.com/how-to-remove-a-submodule-from-your-git-repository</id>
    <content type="html"><![CDATA[<p>Submodules are awesome. Adding them is easy enough. But how about getting rid of them again? In this short post I'll share how to do just that.</p>

<!--more-->


<p>We all know having submodules in Git is very handy. You don't have to check all of the code in, just the reference and, when needed, initialize them.</p>

<h2>Traces of submodules</h2>

<p>When installing a submodule in Git it does a couple of things. It adds a <code>record</code> to your <code>.gitmodules</code> file. When this file doesn't exist it will create one. An example of this is:</p>

<pre><code>[submodule "some/nice/folder"]
    path = some/nice/folder
    url = git://github.com/your_idol/awesome.git
</code></pre>

<p>Secondly, it adds the URLs/mappings to your <code>.git/config</code> file. This is done when you use <code>git init submodule</code>.</p>

<p>Last but not least, it adds references to the submodule in your commits.</p>

<h2>Fine, but how do I get rid of them?</h2>

<p>The first two traces are easy enough to remove. Just open up <code>.gitsubmodules</code> and remove the reference to it. Next, open up <code>.git/config</code> and remove the mappings there as well. Last, but not least, use the following command from the root directory of your git repository:</p>

<pre><code>$ git rm --cached path/to/submodule
</code></pre>

<p>Notice that you have to leave out the trailing slash, else the command will moan about it.</p>

<p>And that's it! Your submodule is gone.</p>

<p>Hope this helps anyone.</p>
]]></content>
  </entry>
  
</feed>

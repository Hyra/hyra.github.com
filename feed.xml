<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Mindthecode Feed]]></title><description><![CDATA[Mindthecode Feed]]></description><link>feed.xml</link><generator>RSS for Node</generator><lastBuildDate>Sun, 29 Dec 2013 08:10:12 GMT</lastBuildDate><atom:link href="feed.xml" rel="self" type="application/rss+xml"/><author><![CDATA[Stef van den Ham]]></author><pubDate>Sun, 29 Dec 2013 08:10:12 GMT</pubDate><copyright><![CDATA[2013 Stef van den Ham]]></copyright><language><![CDATA[en]]></language><managingEditor><![CDATA[Stef van den Ham]]></managingEditor><webMaster><![CDATA[Stef van den Ham]]></webMaster><ttl>60</ttl><item><title><![CDATA[How to use environment variables in your Angular application]]></title><description><![CDATA[<p>If you develop a website that uses multiple environments such as <strong>development</strong>, <strong>staging</strong> and <strong>production</strong> you probably have a configuration file of sorts to handle things like database settings, mail server credentials, and so on for your backend system.</p>
<p>But how do you handle such variables in the front-end? Specifically, in an AngularJS App?</p>
<p>For instance, you might have a seperate API you&#39;re talking to for your content, which has a different location locally, than on your production server. Or you might want to do some debugging or verbose output, based on what environment you&#39;re on.</p>
<p>In this post I&#39;ll show you how to set this up automagically using Grunt and ngConstant.</p>
<h2><a name="the-ingredients" class="anchor" href="#the-ingredients"><span class="header-link"></span></a>The ingredients</h2>
<h3><a name="grunt" class="anchor" href="#grunt"><span class="header-link"></span></a>Grunt</h3>
<p>I&#39;ll assume you&#39;re familiar with <a href="http://gruntjs.com/">Grunt</a> and have set it up to aid your workflow. If not, there&#39;s plenty of tutorials out there to get this going.</p>
<h3><a name="grunt-ng-constant" class="anchor" href="#grunt-ng-constant"><span class="header-link"></span></a>grunt-ng-constant</h3>
<p>This Grunt plugin takes care of the dynamic generation of your constants. Grab it <a href="https://github.com/werk85/grunt-ng-constant">here</a>, or simply install it by doing:</p>
<pre><code><div class="highlight"><pre><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">grunt</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">constant</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">dev</span>
</pre></div>
</code></pre>
<h2><a name="automatically-write-your-config-js-file" class="anchor" href="#automatically-write-your-config-js-file"><span class="header-link"></span></a>Automatically write your config.js file</h2>
<p>Now that you have all you need, let&#39;s set it up! Open up your <code>Gruntfile.js</code>, and inside the <code>grunt.initConfig</code> section add the following:</p>
<pre><code><div class="highlight"><pre><span class="nx">ngconstant</span><span class="o">:</span> <span class="p">{</span>
  <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">space</span><span class="o">:</span> <span class="s1">&#39;  &#39;</span>
  <span class="p">},</span>
  <span class="c1">// Environment targets</span>
  <span class="nx">development</span><span class="o">:</span> <span class="p">[{</span>
    <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;&lt;%= yeoman.app %&gt;/scripts/config.js&#39;</span><span class="p">,</span>
    <span class="nx">wrap</span><span class="o">:</span> <span class="s1">&#39;&quot;use strict&quot;;\n\n &lt;%= __ngModule %&gt;&#39;</span><span class="p">,</span>
    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;config&#39;</span><span class="p">,</span>
    <span class="nx">constants</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">ENV</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;development&#39;</span><span class="p">,</span>
        <span class="nx">apiEndpoint</span><span class="o">:</span> <span class="s1">&#39;http://your-development.api.endpoint:3000&#39;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}],</span>
  <span class="nx">production</span><span class="o">:</span> <span class="p">[{</span>
    <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;&lt;%= yeoman.dist %&gt;/scripts/config.js&#39;</span><span class="p">,</span>
    <span class="nx">wrap</span><span class="o">:</span> <span class="s1">&#39;&quot;use strict&quot;;\n\n &lt;%= __ngModule %&gt;&#39;</span><span class="p">,</span>
    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;config&#39;</span><span class="p">,</span>
    <span class="nx">constants</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">ENV</span><span class="o">:</span> <span class="s1">&#39;production&#39;</span><span class="p">,</span>
      <span class="nx">apiEndpoint</span><span class="o">:</span> <span class="s1">&#39;http://api.livesite.com&#39;</span>
    <span class="p">}</span>
  <span class="p">}]</span>
<span class="p">},</span>
</pre></div>
</code></pre>
<p>This tells Grunt about your environments. Each target is told where to write the config file to, and inside <code>constants</code> you define your environmental variables you wish to use in your Angular App.</p>
<p>Next up, we need to tell Grunt when to write this config file. Depending on your Gruntfile you will probably have a section that tells it to run a local server so you can develop your site. Mine usually looks like this:</p>
<pre><code><div class="highlight"><pre><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;serve&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">target</span> <span class="o">===</span> <span class="s1">&#39;dist&#39;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">grunt</span><span class="p">.</span><span class="nx">task</span><span class="p">.</span><span class="nx">run</span><span class="p">([</span><span class="s1">&#39;build&#39;</span><span class="p">,</span> <span class="s1">&#39;connect:dist:keepalive&#39;</span><span class="p">]);</span>
  <span class="p">}</span>

  <span class="nx">grunt</span><span class="p">.</span><span class="nx">task</span><span class="p">.</span><span class="nx">run</span><span class="p">([</span>
    <span class="s1">&#39;clean:server&#39;</span><span class="p">,</span>
    <span class="s1">&#39;ngconstant:development&#39;</span><span class="p">,</span> <span class="c1">// ADD THIS</span>
    <span class="s1">&#39;bower-install&#39;</span><span class="p">,</span>
    <span class="s1">&#39;concurrent:server&#39;</span><span class="p">,</span>
    <span class="s1">&#39;autoprefixer&#39;</span><span class="p">,</span>
    <span class="s1">&#39;connect:livereload&#39;</span><span class="p">,</span>
    <span class="s1">&#39;watch&#39;</span>
  <span class="p">]);</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>Here we tell Grunt to build the ng-constants for the <strong>development</strong> area. So whenever you boot up the local environment with <code>grunt serve</code>, it will write out the config file for the development target.</p>
<p>Likewise, we want to do the same for our production environment. Best place to do that is in our <code>grunt build</code> task:</p>
<pre><code><div class="highlight"><pre><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;build&#39;</span><span class="p">,</span> <span class="p">[</span>
  <span class="s1">&#39;clean:dist&#39;</span><span class="p">,</span>
  <span class="s1">&#39;ngconstant:production&#39;</span><span class="p">,</span> <span class="c1">// ADD THIS</span>
  <span class="s1">&#39;bower-install&#39;</span><span class="p">,</span>
  <span class="p">..</span> <span class="c1">// other build tasks</span>
<span class="p">]);</span>
</pre></div>
</code></pre>
<p>When Grunt runs the task, a config file is generated, with our constants:</p>
<pre><code><div class="highlight"><pre><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

<span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;config&#39;</span><span class="p">,</span> <span class="p">[])</span>

<span class="p">.</span><span class="nx">constant</span><span class="p">(</span><span class="s1">&#39;ENV&#39;</span><span class="p">,</span> <span class="p">{</span>
  <span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="s1">&#39;development&#39;</span><span class="p">,</span>
  <span class="s1">&#39;apiEndpoint&#39;</span><span class="o">:</span> <span class="s1">&#39;http://your-development.api.endpoint:3000&#39;</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<h2><a name="using-the-config-file-in-your-app" class="anchor" href="#using-the-config-file-in-your-app"><span class="header-link"></span></a>Using the config file in your App</h2>
<p>So, now that we have a dynamic <code>config.js</code> file based on where we are, let&#39;s see how we can use it in our AngularJS App.</p>
<p>First thing to do is add the config file to our <code>index.html</code></p>
<pre><code><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;/scripts/config.js&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</code></pre>
<p>Next, we can inject it into our app:</p>
<pre><code><div class="highlight"><pre><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">,</span> <span class="p">[</span> <span class="s1">&#39;config&#39;</span> <span class="p">]);</span>
</pre></div>
</code></pre>
<p>And now, since config.js exposes an object <code>ENV</code> which is injected, whenever we need our ENV variables we can simply use them in our controllers by doing:</p>
<pre><code><div class="highlight"><pre><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MainCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$http</span><span class="p">,</span> <span class="nx">ENV</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// ENV is injected</span>

  <span class="nx">$scope</span><span class="p">.</span><span class="nx">login</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

    <span class="nx">$http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span>
      <span class="nx">ENV</span><span class="p">.</span><span class="nx">apiEndPoint</span><span class="p">,</span> <span class="c1">// Our environmental var :)</span>
      <span class="nx">$scope</span><span class="p">.</span><span class="nx">yourData</span>
    <span class="p">).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Cows&#39;</span><span class="p">);</span>
    <span class="p">});</span>

  <span class="p">};</span>

<span class="p">});</span>
</pre></div>
</code></pre>
<p>And there you have it. Environmental variables in your front-end. It might look like a lot of work, but once you&#39;ve set it up it&#39;s easy to extend the variables and duplicate environments to match your needs.</p>
<p>Happy coding.</p>
]]></description><link>how-to-use-environment-variables-in-your-angular-application/</link><guid isPermaLink="true">how-to-use-environment-variables-in-your-angular-application/</guid><category><![CDATA[angularjs]]></category><category><![CDATA[grunt]]></category><category><![CDATA[angular]]></category><dc:creator><![CDATA[Stef van den Ham]]></dc:creator><pubDate>Sun, 29 Dec 2013 07:30:00 GMT</pubDate></item><item><title><![CDATA[HTTPIe, a command line HTTP client]]></title><description><![CDATA[<p>Stumbled upon <strong><a href="https://github.com/jkbr/httpie">HTTPie</a></strong>, a command line HTTP client. It&#39;s pretty awesome. Basically it&#39;s Curl on steroids, as it has an easy interface and syntax highlighted output.</p>
<p>Here&#39;s an example of a simple GET request to the <a href="http://baconipsum.com/api/">Bacon Ipsum JSON service</a>:</p>
<p><img src="/images/screenshots/131208_http.png" alt="HTTPie"></p>
<p>Of course you can do actual useful stuff as well, such as POST-ing, Authentication, Cookies, Custom Headers, etc.</p>
<p>As the repo says, the main features are:</p>
<ul>
<li>Expressive and intuitive syntax</li>
<li>Formatted and colorized terminal output</li>
<li>Built-in JSON support</li>
<li>Forms and file uploads</li>
<li>HTTPS, proxies, and authentication</li>
<li>Arbitrary request data</li>
<li>Custom headers</li>
<li>Persistent sessions</li>
<li>Wget-like downloads</li>
<li>Python 2.6, 2.7 and 3.x support</li>
<li>Linux, Mac OS X and Windows support</li>
<li>Documentation</li>
<li>Test coverage</li>
</ul>
<p>I haven&#39;t played with it much yet, but so far it seems like a rather useful little tool, worth checking out.</p>
<p>You can get it <a href="https://github.com/jkbr/httpie">here</a></p>
]]></description><link>httpie-a-command-line-http-client/</link><guid isPermaLink="true">httpie-a-command-line-http-client/</guid><category><![CDATA[cli]]></category><category><![CDATA[http]]></category><category><![CDATA[client]]></category><dc:creator><![CDATA[Stef van den Ham]]></dc:creator><pubDate>Sun, 08 Dec 2013 13:00:00 GMT</pubDate></item><item><title><![CDATA[Blogging with CabinJS and Grunt]]></title><description><![CDATA[<p>I just want to mention <a href="http://www.cabinjs.com">CabinJS</a>. It took me all of 10 minutes to set it up, and another 10 to get the automatic deployment to Github Pages working. The other 4 hours this sunday I spent on <em>layouting</em>, <em>designing</em> and <em>tweaking</em> the blog you&#39;re reading now.</p>
<p>And that&#39;s pretty sweet.</p>
<p>There&#39;s quite a few <strong>static site generators</strong> on the market today, of which <a href="http://jekyllrb.com">Jekyll</a> probably is the most famous, but CabinJS elevates a minimalistic setup combined with Grunt tasks to a new level of awesomeness. You can focus on writing your posts, instead of configuring your generator.</p>
<p>If you&#39;re looking for a blog generator that uses Grunt for:</p>
<ul>
<li>Auto reloading</li>
<li>SASS compiling</li>
<li>Deploying to Github, Amazon S3 or FTP</li>
</ul>
<p>.. make sure to <a href="http://www.cabinjs.com">CabinJS</a> a try.</p>
]]></description><link>blogging-with-cabinjs-and-grunt/</link><guid isPermaLink="true">blogging-with-cabinjs-and-grunt/</guid><category><![CDATA[blogging]]></category><category><![CDATA[cabinjs]]></category><dc:creator><![CDATA[Stef van den Ham]]></dc:creator><pubDate>Sun, 08 Dec 2013 11:00:00 GMT</pubDate></item><item><title><![CDATA[A more colourful cat in your shell]]></title><description><![CDATA[<p>I just wanted to quickly share a shell alias I have been using lately to get some more color in the terminal when you cat a file.</p>
<!--more-->

<p>Below is a screenshot of what an <a href="/customize-the-terminal/">average terminal</a> looks like when you just use</p>
<pre><code><div class="highlight"><pre><span class="nx">$</span> <span class="nx">cat</span> <span class="nx">somefile</span><span class="p">.</span><span class="nx">js</span>
</pre></div>
</code></pre>
<p><img src="/images/screenshots/130806_terminal_dull.png" alt="Terminal Dull Colours" title="Terminal Dull Colours"></p>
<p>Sure, it does the job, and you probably are ok with it looking dull as hell. But what if you could make it look like this:</p>
<p><img src="/images/screenshots/130806_terminal_colour.png" alt="Terminal Colour" title="Terminal Colour"></p>
<p>Indeed! If you could, why wouldn&#39;t you?</p>
<h2><a name="the-ingredients" class="anchor" href="#the-ingredients"><span class="header-link"></span></a>The ingredients</h2>
<p>So, let&#39;s get to it. Luckily this isn&#39;t very complex to get going on your machine. Let&#39;s start by installing <a href="https://github.com/tmm1/pygments.rb">Pygments</a>. This little Ruby wrapper library is used to make the realtime syntax highlighting possible:</p>
<pre><code><div class="highlight"><pre><span class="nx">gem</span> <span class="nx">install</span> <span class="nx">pygments</span>
</pre></div>
</code></pre>
<p>Next up, the alias itself. Depending on your shell and environment open up your profile. If you aren&#39;t sure whether you&#39;ve installed or configured something specifically on your system, chances are the file you are looking for (on OSX at least) is <code>~/.bashrc</code>.</p>
<p>In there, add the following alias:</p>
<pre><code><div class="highlight"><pre><span class="nx">alias</span> <span class="nx">c</span><span class="o">=</span><span class="s1">&#39;pygmentize -O style=monokai -f console256 -g&#39;</span>
</pre></div>
</code></pre>
<p>And that&#39;s all there is to it. Now whenever you type <code>c some-file.ext</code> it will detect the extension and add syntax highlighting.</p>
<p>I chose the monokai style because it looks awesome and works well with the rest of my ZSH theme, but feel free to try a few and see which works best for you.</p>
<p>Happy CLI-ing!</p>
]]></description><link>a-more-colourful-cat-in-your-shell/</link><guid isPermaLink="true">a-more-colourful-cat-in-your-shell/</guid><category><![CDATA[terminal]]></category><category><![CDATA[command line]]></category><category><![CDATA[OSX]]></category><category><![CDATA[shell]]></category><dc:creator><![CDATA[Stef van den Ham]]></dc:creator><pubDate>Tue, 06 Aug 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Getting used to Vim]]></title><description><![CDATA[<p>So there we go. Writing this post in vim. Macvim to be exact. Trying not to touch the arrow keys, not use the h-j-k-l too extensively either, work with A and I a lot, and generally trying not to cock things up too much by hitting the wrong commands.</p>
<!--more-->

<p>So why do I willingly put myself through the torture of using the monster that is Vim? Well, just like a lot of developers out there, I&#39;ve had a long time desire to be able to use Vim properly. No immediate need, just a personal goal if you will. I&#39;ve tried Vim a couple of times over the last few months, but pretty much every attempt lead quickly to being overwhelmed by all the different commands and feeling about a gazillion times slower as I did when using Sublime Text Edit 2.</p>
<h3><a name="new-tactic" class="anchor" href="#new-tactic"><span class="header-link"></span></a>New tactic</h3>
<p>The new plan is not as exciting or brilliant as one might hope, but it&#39;s one that might just work: <em>Forceful editing</em>
What? Well, it&#39;s simple really .. whenever I was trying out Vim and found myself having to actually &quot;quickly&quot; edit a file or whip up some code I switched to my trustworthy Sublime. This time around I&#39;m going to force myself to stay in Vim. This will slow me down at first. A lot. And it will probably lead to some cursing and frustration. But I guess it&#39;s the only way to learn.</p>
<p>So here we go, I&#39;ve written this post in Vim, the keyboard is still intact, I haven&#39;t cursed and screamed more than usual, so I suppose we&#39;re off to a good start.</p>
<p>As a bonus I&#39;ve decided I&#39;ll keep you guys informed of my progress and share my findings, tips and useful plugins I might stumble upon whilst enduring this ordeal :)</p>
<p>If any of you are already using Vim and have some tips or tricks, let us know!</p>
<p>For now all that&#39;s left is to save, commit and push this file .. all from within Vim!</p>
<p>I like.</p>
]]></description><link>getting-used-to-vim/</link><guid isPermaLink="true">getting-used-to-vim/</guid><category><![CDATA[vim]]></category><dc:creator><![CDATA[Stef van den Ham]]></dc:creator><pubDate>Sat, 09 Feb 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Updated the PHPUnit CakePHP installer]]></title><description><![CDATA[<p>Just a quick note, the CakePHP PHPUnit installer has been updated to use version 3.7.8. Go grab it <a href="https://github.com/Hyra/PHPUnit-Cake2">here</a> if you are no fan of PEAR and want a self contained PHPUnit testing system.</p>
<p>Works on Mac OSX, Linux and Windows.</p>
]]></description><link>updated-the-phpunit-cakephp-installer/</link><guid isPermaLink="true">updated-the-phpunit-cakephp-installer/</guid><dc:creator><![CDATA[Stef van den Ham]]></dc:creator><pubDate>Tue, 06 Nov 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Blogging with Octopress]]></title><description><![CDATA[<p>As some of you may know, even though I don&#39;t blog all that often, I do mess about with it a lot. Mostly on what makes it run. Switching between <a href="http://croogo.org">Croogo</a>, a custom built <a href="http://cakephp.org">CakePHP</a> site, <a href="http://wordpress.org">Wordpress</a> .. and back again.</p>
<!--more-->

<p>For some reason none of them really seemed what I wanted. Croogo is cool enough, but actually adding posts is a hassle, and theming the thing was more of a puzle. Wordpress does the blogging thing really well, but it always feels ugly, and I had to rely on various plugins to make my post-flow work. I like writing in <a href="http://daringfireball.net/projects/markdown/">Markdown</a>. There&#39;s a couple of Markdown plugins for Wordpress, but I would still have to copy paste stuff in webinterface, and had to hack it to allow for code-snippet sharing.</p>
<h3><a name="enter-octopress" class="anchor" href="#enter-octopress"><span class="header-link"></span></a>Enter Octopress</h3>
<p>I somehow stumbled upon <a href="http://octopress.org">Octopress</a> earlier this week, and decided to give it a go. Short conclusion: <em>It&#39;s awesome</em>.</p>
<p>I won&#39;t go into all of the features, as that&#39;s nicely explained on their site, but basically it allows for this workflow:</p>
<ul>
<li>Run <code>rake preview</code> in the background</li>
<li>Write my posts in <a href="http://daringfireball.net/projects/markdown/">Markdown</a>, with some settings in the top such as title, publish date, etc.</li>
<li>Hit save</li>
<li>See the changes in the browser</li>
<li>When happy, <code>rake deploy</code></li>
</ul>
<p>Now, the deploy function is very awesome. It automatically generate the site to a <code>public</code> folder, commits the whole thing to your git repository, and pushes it. When linked to a Github Pages site it will auto update your site.</p>
<p>So yeah, this is good stuff, as I can just write my plain text files like I want to, and without any further webinterfacing and option clicking I can publish new articles.</p>
]]></description><link>blogging-with-octopress/</link><guid isPermaLink="true">blogging-with-octopress/</guid><dc:creator><![CDATA[Stef van den Ham]]></dc:creator><pubDate>Fri, 26 Oct 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Spotify Boilerplate App]]></title><description><![CDATA[<p>A while ago we were proud to be releasing 2 of the very first Spotify Apps in the Netherlands at <a href="http://noprotocol.nl" title="NoProtocol" target="_blank">NoProtocol</a>. For a long time since I&#39;ve been planning on creating a Boilerplate in which we could put all the best practices and redo some stuff in hindsight.</p>
<p>And finally, it&#39;s here! You can grab it at <a href="https://github.com/Hyra/Spotify-Boilerplate" title="https://github.com/Hyra/Spotify-Boilerplate" target="_blank"><a href="https://github.com/Hyra/Spotify-Boilerplate">https://github.com/Hyra/Spotify-Boilerplate</a></a></p>
<p>For a bit more in-depth information, read on ..</p>
<!--more-->

<p>The Boilerplate project aims to provide a foundation upon which you can start building Spotify Apps. It takes away the hassle of writing the necessary boilerplate code and is structured so you can start developing straight away.</p>
<p>I will add to it as I stumble upon free time, but feel free to open a Pull Request or submit an issue for a suggestion</p>
<h2><a name="some-of-the-features" class="anchor" href="#some-of-the-features"><span class="header-link"></span></a>Some of the features</h2>
<ul>
<li>Small footprint</li>
<li>Automatic Tab Handling</li>
<li>Automatic Deeplink handling</li>
<li>Automatic Cover Loading for playlists (mosaics)</li>
<li>Online/offline status tracking and content switching</li>
</ul>
<h2><a name="how-to-set-it-up-on-your-mac" class="anchor" href="#how-to-set-it-up-on-your-mac"><span class="header-link"></span></a>How to set it up (on your Mac)</h2>
<ol>
<li>Sign up for a developer account on Spotify</li>
<li>Open Terminal, and if it doesn&#39;t exist yet <code>mkdir ~/Spotify</code></li>
<li>cd ~/Spotify</li>
<li>git clone git@github.com:Hyra/Spotify-Boilerplate.git</li>
<li>Download the latest version of Spotify</li>
<li>Open Spotify and type <code>spotify:app:boilerplate</code> in the search bar</li>
</ol>
<h2><a name="whats-in-the-boilerplate" class="anchor" href="#whats-in-the-boilerplate"><span class="header-link"></span></a>What&#39;s in the Boilerplate</h2>
<p>The aim is to keep the Boilerplate as clean as possible, while giving all the tools to quickly develop your app.</p>
<h3><a name="how-to-work-with-it-the-short-version" class="anchor" href="#how-to-work-with-it-the-short-version"><span class="header-link"></span></a>How to work with it (the short version)</h3>
<p>What you want to look for is <code>js/app.js</code>. Once index.html has been loaded by Spotify it will fire off our Sammy instance:</p>
<pre><code><div class="highlight"><pre><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">app</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="s1">&#39;/home&#39;</span><span class="p">);</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>Here you can also handle any other bootstrapping you might want to do.</p>
<p>Next up, the Sammy route gets invoked:</p>
<pre><code><div class="highlight"><pre><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;home&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ctxt</span><span class="p">)</span> <span class="p">{</span>

    <span class="nx">loadSection</span><span class="p">(</span><span class="nx">ctxt</span><span class="p">,</span> <span class="s2">&quot;news&quot;</span><span class="p">,</span> <span class="s2">&quot;/templates/home.html&quot;</span><span class="p">,</span> <span class="s2">&quot;js/_example_data.json&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Callback actions</span>
    <span class="p">});</span>

<span class="p">});</span>
</pre></div>
</code></pre>
<p>This is what you will most likely expand on for your app. The route loads a Mustache template into the DOM, parses it, asynch-y fill in the Spotify details, and cache it. After that it will run your callback actions, should you need to.</p>
<p><code>loadSection</code> takes 5 parameters at the moment:</p>
<p><strong>ctxt</strong> A reference to the <code>Sammy.Context</code> which was passed to the route</p>
<p><strong>ID</strong> A unique identifier for the content which is used as a cache-key</p>
<p><strong>Template File</strong> location to the Mustache template</p>
<p><strong>JSON Location</strong> location to the JSON you want to use. This is useful if you want to connect your app with a (RESTful) web service to feed content to your app. NOTE: If you use absolute URLs here you should add the domains to your <code>manifest.json</code></p>
<p><strong>Callback</strong> This callback function you can use to do your post-processing</p>
<h3><a name="dependencies" class="anchor" href="#dependencies"><span class="header-link"></span></a>Dependencies</h3>
<p>The boilerplate relies on a couple of libraries:</p>
<p>Sammy.js for the routing, templating parsing and content swapping. It&#39;s just an awesome little tool</p>
<p>jQuery as we&#39;ve all become used to it at some point</p>
<p>Mustache as a template handler. This can just as well be any of the other gazillion templating engines out there, so feel free to hack your favourite in.</p>
<h3><a name="roadmap" class="anchor" href="#roadmap"><span class="header-link"></span></a>Roadmap</h3>
<ul>
<li>Add more features/functionality regarding the Spotify API</li>
<li>Make the loadSection and Sammy integration a bit more seamless and less explicit</li>
<li>Spend more time documenting and writing how-to&#39;s</li>
</ul>
]]></description><link>spotify-boilerplate-app/</link><guid isPermaLink="true">spotify-boilerplate-app/</guid><dc:creator><![CDATA[Stef van den Ham]]></dc:creator><pubDate>Tue, 18 Sep 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Good times with Watchr, Coffeescript and LESS]]></title><description><![CDATA[<p>I have been working on a pure HTML front-end for one of the pet projects I&#39;m doing. A lot of fun, but while developing, running the terminal commands to compile both the .less and .coffee files gets a tad tedious. <a href="https://github.com/mynyml/watchr">&quot;Watchr&quot;</a> to the rescue! With this little gem you can watch specific folders or file extensions and run commands based on the files you watch.</p>
<p>Here is how I got it set up now ..</p>
<!--more-->

<h2><a name="installing-watchr" class="anchor" href="#installing-watchr"><span class="header-link"></span></a>Installing watchr</h2>
<p>First of all we need to get the Watchr gem installed. Assuming you have a Mac and got XCode (or at least the tools) installed, this is pretty simple:</p>
<pre><code><div class="highlight"><pre><span class="nx">$</span> <span class="nx">gem</span> <span class="nx">install</span> <span class="nx">watchr</span>
</pre></div>
</code></pre>
<h2><a name="installing-coffeescript" class="anchor" href="#installing-coffeescript"><span class="header-link"></span></a>Installing coffeescript</h2>
<p>Another easy one ..</p>
<pre><code><div class="highlight"><pre><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">install</span> <span class="o">-</span><span class="nx">g</span> <span class="nx">coffee</span><span class="o">-</span><span class="nx">script</span>
</pre></div>
</code></pre>
<p>Don&#39;t forget the <code>-g</code> flag as you (probably) want it to be installed globally.</p>
<h2><a name="installing-the-less-compiler" class="anchor" href="#installing-the-less-compiler"><span class="header-link"></span></a>Installing the LESS compiler</h2>
<p>You got the hang of it now, it&#39;s as easy as ..</p>
<pre><code><div class="highlight"><pre><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">install</span> <span class="o">-</span><span class="nx">g</span> <span class="nx">less</span>
</pre></div>
</code></pre>
<h2><a name="the-fun-part" class="anchor" href="#the-fun-part"><span class="header-link"></span></a>The fun part!</h2>
<p>Now we&#39;re ready for the fun bit, setting up watchr to do some automagic stuff.</p>
<p>I have a typical folder structure, with the exception of a new <code>_src</code> folder which will contain all the raw coffeescript and less files.</p>
<pre><code><div class="highlight"><pre><span class="err">/index.html</span>
<span class="o">/</span><span class="nx">css</span>
<span class="o">/</span><span class="nx">js</span>
<span class="o">/</span><span class="nx">img</span>
<span class="o">/</span><span class="nx">_src</span>
    <span class="o">/</span><span class="nx">less</span>
    <span class="o">/</span><span class="nx">coffee</span>
</pre></div>
</code></pre>
<p>Watchr works with a config file, which basically tells it what to watch for, and what to do if it finds any changes. I placed the file inside the <code>_src</code> folder and named it <code>watchr.rb</code></p>
<p>Here&#39;s my config file at the moment:</p>
<pre><code><div class="highlight"><pre><span class="nx">def</span> <span class="nx">compile_less</span>
    <span class="o">%</span><span class="nx">x</span><span class="p">[</span><span class="nx">lessc</span> <span class="nx">less</span><span class="o">/</span><span class="nx">bootstrap</span><span class="o">/</span><span class="nx">bootstrap</span><span class="p">.</span><span class="nx">less</span> <span class="p">..</span><span class="o">/</span><span class="nx">css</span><span class="o">/</span><span class="nx">main</span><span class="p">.</span><span class="nx">css</span> <span class="o">--</span><span class="nx">yui</span><span class="o">-</span><span class="nx">compress</span><span class="p">]</span>
<span class="nx">end</span>

<span class="nx">def</span> <span class="nx">compile_coffee</span>
    <span class="o">%</span><span class="nx">x</span><span class="p">[</span><span class="nx">coffee</span> <span class="o">-</span><span class="nx">c</span> <span class="o">-</span><span class="nx">j</span> <span class="p">..</span><span class="o">/</span><span class="nx">js</span><span class="o">/</span><span class="nx">app</span><span class="p">.</span><span class="nx">js</span> <span class="nx">coffee</span><span class="o">/</span><span class="p">]</span>
<span class="nx">end</span>

<span class="nx">def</span> <span class="nx">do_growl</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span>
    <span class="nx">growlnotify</span> <span class="o">=</span> <span class="err">`</span><span class="nx">which</span> <span class="nx">growlnotify</span><span class="err">`</span><span class="p">.</span><span class="nx">chomp</span>
  <span class="nx">title</span> <span class="o">=</span> <span class="s2">&quot;Watchr Message&quot;</span>
  <span class="nx">passed</span> <span class="o">=</span> <span class="nx">message</span><span class="p">.</span><span class="nx">include</span><span class="o">?</span><span class="p">(</span><span class="s1">&#39;0 failures, 0 errors&#39;</span><span class="p">)</span>
  <span class="nx">image</span> <span class="o">=</span> <span class="nx">passed</span> <span class="o">?</span> <span class="s2">&quot;~/.watchr_images/passed.png&quot;</span> <span class="o">:</span> <span class="s2">&quot;~/.watchr_images/failed.png&quot;</span>
  <span class="nx">severity</span> <span class="o">=</span> <span class="nx">passed</span> <span class="o">?</span> <span class="s2">&quot;-1&quot;</span> <span class="o">:</span> <span class="s2">&quot;1&quot;</span>
  <span class="nx">options</span> <span class="o">=</span> <span class="s2">&quot;-w -n Watchr --image &#39;#{File.expand_path(image)}&#39;&quot;</span>
  <span class="nx">options</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot; -m &#39;#{message}&#39; &#39;#{title}&#39; -p #{severity}&quot;</span>
  <span class="nx">system</span> <span class="o">%</span><span class="p">(</span><span class="err">#</span><span class="p">{</span><span class="nx">growlnotify</span><span class="p">}</span> <span class="err">#</span><span class="p">{</span><span class="nx">options</span><span class="p">}</span> <span class="o">&amp;</span><span class="p">)</span>
<span class="nx">end</span>

<span class="nx">do_growl</span> <span class="s2">&quot;Watching folders and waiting for changes ..&quot;</span>

<span class="nx">watch</span><span class="p">(</span><span class="s1">&#39;less/*&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="nx">m</span><span class="o">|</span>
    <span class="err">#</span> <span class="nx">Recompile</span> <span class="nx">LESS</span> <span class="nx">files</span>
    <span class="nx">compile_less</span>
    <span class="nx">do_growl</span> <span class="s2">&quot;LESS Compiled and Compressed!&quot;</span>
<span class="p">}</span>

<span class="nx">watch</span><span class="p">(</span><span class="s1">&#39;coffee/*&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="nx">m</span><span class="o">|</span>
    <span class="err">#</span> <span class="nx">Recompile</span> <span class="nx">Coffeescripts</span>
    <span class="nx">compile_coffee</span>
    <span class="nx">do_growl</span> <span class="s2">&quot;Coffeescripts compiled and concatenated!&quot;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>As you can see at the bottom I&#39;m watching the 2 folders seperately, as I want to run different commands for them. For the project I&#39;m working on I&#39;m using Twitter Bootstrap, so rather than compiling all the .less files to seperate .css files I just want to compiled bootstrap.less as that @imports all the things it needs. When it&#39;s done with that it yui-compresses the lot and writes the output to <code>css/main.css</code>. Pretty cool!</p>
<p>The compile_coffee command does something pretty similar. Whenever a .coffee file in the coffee folder changes it will compile them all and combine the output (notice the <code>-j</code> flag) and write it to <code>js/app.js</code>.</p>
<p>To get the show on the road, cd to the <code>_src</code> folder, and run:</p>
<pre><code><div class="highlight"><pre><span class="nx">$</span> <span class="nx">watchr</span> <span class="nx">watchr</span><span class="p">.</span><span class="nx">rb</span>
</pre></div>
</code></pre>
<p>You may have noticed the <code>do_growl</code> function, which doesn&#39;t really add value except that it&#39;s just cool to get a Growl message whenever it has done it&#39;s thing. To get that bit working you have to install <a href="http://growl.info/extras.php#growlnotify">&quot;Growl Notify&quot;</a>.</p>
<p>If you&#39;re not that interested, or you don&#39;t have a Mac with Growl simply remove the function and the do_growl calls from the watch patterns.</p>
<p>I&#39;m sure I could optimize this a bit, and add variables for output folders and options, but for now it&#39;s simple, working, and pretty damn cool.</p>
<p>Let me know how you get your watchr set up!</p>
]]></description><link>good-times-with-watchr-coffeescript-and-less/</link><guid isPermaLink="true">good-times-with-watchr-coffeescript-and-less/</guid><dc:creator><![CDATA[Stef van den Ham]]></dc:creator><pubDate>Wed, 16 May 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Format associative JSON to work with Knockout.js]]></title><description><![CDATA[<p>I recently started creating a RESTful API in CakePHP to work with a Knockout.js frontend.</p>
<p>While Knockout.js is a lot of fun, it does expect your JSON to be in a certain format.</p>
<!--more-->

<p>Take the following response from a simple <code>find</code> action:</p>
<pre><code><div class="highlight"><pre><span class="s2">&quot;Projects&quot;</span><span class="o">:</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="s2">&quot;Project&quot;</span><span class="o">:</span> <span class="p">{</span>
            <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="s2">&quot;151&quot;</span><span class="p">,</span>
            <span class="s2">&quot;title&quot;</span><span class="o">:</span> <span class="s2">&quot;Een ander project&quot;</span><span class="p">,</span>
            <span class="s2">&quot;slug&quot;</span><span class="o">:</span> <span class="s2">&quot;een-ander-project&quot;</span><span class="p">,</span>
            <span class="s2">&quot;description&quot;</span><span class="o">:</span> <span class="s2">&quot;dsfdsfs&quot;</span><span class="p">,</span>
            <span class="s2">&quot;tasks_count&quot;</span><span class="o">:</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span>
            <span class="s2">&quot;tasks_backlog&quot;</span><span class="o">:</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span>
            <span class="s2">&quot;tasks_open&quot;</span><span class="o">:</span> <span class="s2">&quot;0&quot;</span><span class="p">,</span>
            <span class="s2">&quot;tasks_closed&quot;</span><span class="o">:</span> <span class="s2">&quot;0&quot;</span><span class="p">,</span>
            <span class="s2">&quot;duedate&quot;</span><span class="o">:</span> <span class="s2">&quot;2012-04-09&quot;</span><span class="p">,</span>
            <span class="s2">&quot;created&quot;</span><span class="o">:</span> <span class="s2">&quot;2012-04-09 13:52:19&quot;</span><span class="p">,</span>
            <span class="s2">&quot;modified&quot;</span><span class="o">:</span> <span class="s2">&quot;2012-04-09 13:52:19&quot;</span>
        <span class="p">},</span>
        <span class="s2">&quot;Task&quot;</span><span class="o">:</span> <span class="p">[</span> <span class="p">]</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="s2">&quot;Project&quot;</span><span class="o">:</span> <span class="p">{</span>
            <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="s2">&quot;152&quot;</span><span class="p">,</span>
            <span class="s2">&quot;title&quot;</span><span class="o">:</span> <span class="s2">&quot;Een ander project&quot;</span><span class="p">,</span>
            <span class="s2">&quot;slug&quot;</span><span class="o">:</span> <span class="s2">&quot;een-ander-project-1&quot;</span><span class="p">,</span>
            <span class="s2">&quot;description&quot;</span><span class="o">:</span> <span class="s2">&quot;dsfdsfs&quot;</span><span class="p">,</span>
            <span class="s2">&quot;tasks_count&quot;</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="s2">&quot;tasks_backlog&quot;</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="s2">&quot;tasks_open&quot;</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="s2">&quot;tasks_closed&quot;</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
            <span class="s2">&quot;duedate&quot;</span><span class="o">:</span> <span class="s2">&quot;2012-04-09&quot;</span><span class="p">,</span>
            <span class="s2">&quot;created&quot;</span><span class="o">:</span> <span class="s2">&quot;2012-04-09 13:55:30&quot;</span><span class="p">,</span>
            <span class="s2">&quot;modified&quot;</span><span class="o">:</span> <span class="s2">&quot;2012-04-09 13:55:30&quot;</span>
        <span class="p">},</span>
        <span class="s2">&quot;Task&quot;</span><span class="o">:</span> <span class="p">[</span> <span class="p">]</span>
    <span class="p">},</span>
</pre></div>
</code></pre>
<p>This is fine to work with in your typical View, but Knockout rather has a nested format, and doesn&#39;t like the leading <code>Project</code> nodes. You could write custom parsers in Knockout, but would quickly become a hell to maintain.</p>
<p>Instead, I wrote a little function to reformat the response to get the result Knockout likes:</p>
<pre><code><div class="highlight"><pre><span class="o">&lt;?</span><span class="nx">php</span>

<span class="kr">public</span> <span class="kd">function</span> <span class="nx">formatResponse</span><span class="p">(</span><span class="nx">$data</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$ret</span> <span class="o">=</span> <span class="nx">array</span><span class="p">();</span>
    <span class="nx">foreach</span><span class="p">(</span><span class="nx">$data</span> <span class="nx">as</span> <span class="nx">$key</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">$keys</span> <span class="o">=</span> <span class="nx">array_keys</span><span class="p">(</span><span class="nx">$key</span><span class="p">);</span>
        <span class="nx">$t</span> <span class="o">=</span> <span class="nx">$key</span><span class="p">[</span><span class="nx">$keys</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span>
        <span class="k">for</span><span class="p">(</span><span class="nx">$i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="nx">$i</span><span class="o">&lt;</span><span class="nx">count</span><span class="p">(</span><span class="nx">$keys</span><span class="p">);</span> <span class="nx">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">$t</span><span class="p">[</span><span class="nx">Inflector</span><span class="o">::</span><span class="nx">pluralize</span><span class="p">(</span><span class="nx">strtolower</span><span class="p">(</span><span class="nx">$keys</span><span class="p">[</span><span class="nx">$i</span><span class="p">]))]</span> <span class="o">=</span> <span class="nx">$key</span><span class="p">[</span><span class="nx">$keys</span><span class="p">[</span><span class="nx">$i</span><span class="p">]];</span>
        <span class="p">}</span>
        <span class="nx">$ret</span><span class="p">[]</span> <span class="o">=</span> <span class="nx">$t</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">$ret</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">$projects</span> <span class="o">=</span> <span class="nx">$this</span><span class="o">-&gt;</span><span class="nx">Project</span><span class="o">-&gt;</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;all&#39;</span><span class="p">);</span>
<span class="nx">$projects</span> <span class="o">=</span> <span class="nx">$this</span><span class="o">-&gt;</span><span class="nx">formatResponse</span><span class="p">(</span><span class="nx">$projects</span><span class="p">);</span>
<span class="nx">$this</span><span class="o">-&gt;</span><span class="nx">set</span><span class="p">(</span><span class="nx">compact</span><span class="p">(</span><span class="s1">&#39;projects&#39;</span><span class="p">));</span>
<span class="nx">$this</span><span class="o">-&gt;</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;_serialize&#39;</span><span class="p">,</span> <span class="nx">array</span><span class="p">(</span><span class="s1">&#39;projects&#39;</span><span class="p">));</span>

<span class="o">?&gt;</span>
</pre></div>
</code></pre>
<p>This will reformat the Projects response to:</p>
<pre><code><div class="highlight"><pre><span class="s2">&quot;projects&quot;</span><span class="o">:</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="s2">&quot;151&quot;</span><span class="p">,</span>
        <span class="s2">&quot;title&quot;</span><span class="o">:</span> <span class="s2">&quot;Een ander project&quot;</span><span class="p">,</span>
        <span class="s2">&quot;slug&quot;</span><span class="o">:</span> <span class="s2">&quot;een-ander-project&quot;</span><span class="p">,</span>
        <span class="s2">&quot;description&quot;</span><span class="o">:</span> <span class="s2">&quot;dsfdsfs&quot;</span><span class="p">,</span>
        <span class="s2">&quot;tasks_count&quot;</span><span class="o">:</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span>
        <span class="s2">&quot;tasks_backlog&quot;</span><span class="o">:</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span>
        <span class="s2">&quot;tasks_open&quot;</span><span class="o">:</span> <span class="s2">&quot;0&quot;</span><span class="p">,</span>
        <span class="s2">&quot;tasks_closed&quot;</span><span class="o">:</span> <span class="s2">&quot;0&quot;</span><span class="p">,</span>
        <span class="s2">&quot;duedate&quot;</span><span class="o">:</span> <span class="s2">&quot;2012-04-09&quot;</span><span class="p">,</span>
        <span class="s2">&quot;created&quot;</span><span class="o">:</span> <span class="s2">&quot;2012-04-09 13:52:19&quot;</span><span class="p">,</span>
        <span class="s2">&quot;modified&quot;</span><span class="o">:</span> <span class="s2">&quot;2012-04-09 13:52:19&quot;</span><span class="p">,</span>
        <span class="s2">&quot;tasks&quot;</span><span class="o">:</span> <span class="p">[</span> <span class="p">]</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="s2">&quot;152&quot;</span><span class="p">,</span>
        <span class="s2">&quot;title&quot;</span><span class="o">:</span> <span class="s2">&quot;Een ander project&quot;</span><span class="p">,</span>
        <span class="s2">&quot;slug&quot;</span><span class="o">:</span> <span class="s2">&quot;een-ander-project-1&quot;</span><span class="p">,</span>
        <span class="s2">&quot;description&quot;</span><span class="o">:</span> <span class="s2">&quot;dsfdsfs&quot;</span><span class="p">,</span>
        <span class="s2">&quot;tasks_count&quot;</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
        <span class="s2">&quot;tasks_backlog&quot;</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
        <span class="s2">&quot;tasks_open&quot;</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
        <span class="s2">&quot;tasks_closed&quot;</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
        <span class="s2">&quot;duedate&quot;</span><span class="o">:</span> <span class="s2">&quot;2012-04-09&quot;</span><span class="p">,</span>
        <span class="s2">&quot;created&quot;</span><span class="o">:</span> <span class="s2">&quot;2012-04-09 13:55:30&quot;</span><span class="p">,</span>
        <span class="s2">&quot;modified&quot;</span><span class="o">:</span> <span class="s2">&quot;2012-04-09 13:55:30&quot;</span><span class="p">,</span>
        <span class="s2">&quot;tasks&quot;</span><span class="o">:</span> <span class="p">[</span> <span class="p">]</span>
    <span class="p">},</span>
</pre></div>
</code></pre>
<p>This way I don&#39;t have to worry about modifying the core of how Knockout.js works with JSON, and focus on developing the front-end of my app instead.</p>
<p>It will probably be classier to put the function in something like an <code>afterFind</code>, but for now it will do nicely.</p>
]]></description><link>format-associative-json-to-work-with-knockout-js/</link><guid isPermaLink="true">format-associative-json-to-work-with-knockout-js/</guid><dc:creator><![CDATA[Stef van den Ham]]></dc:creator><pubDate>Wed, 09 May 2012 00:00:00 GMT</pubDate></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PHP | Mindthecode Blog]]></title>
  <link href="http://hyra.github.com/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://hyra.github.com/"/>
  <updated>2012-10-26T08:48:07+02:00</updated>
  <id>http://hyra.github.com/</id>
  <author>
    <name><![CDATA[Stef van den Ham]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Installing PHPUnit manually for CakePHP 2.0]]></title>
    <link href="http://hyra.github.com/installing-phpunit-manually-for-cakephp-2-0/"/>
    <updated>2011-11-11T16:50:00+01:00</updated>
    <id>http://hyra.github.com/installing-phpunit-manually-for-cakephp-2-0</id>
    <content type="html"><![CDATA[<p>I was trying to get into Unit Testing a few months ago. It was a steep learning curve and eventually I gave myself a non-excuse and decided to wait for Cake 2.0 as that would have PHPUnit and it "wouldn't make sense to learn SimpleTest" at that time.</p>

<p>I intend to keep that promise and have been trying to get into Unit Testing for real this time. The first thing was also the most annoying so far: installing the <em>(&amp;#(</em>&amp;. After completely messing up my local PEAR environment I gave up on the "official way" and wrote a <code>PHPUnit Installer Shell</code> to install PHPUnit along with the Cake site.</p>

<!--more-->


<h2>PHPUnit locally?</h2>

<p>Yes! I'm a fan of self-contained systems. Sure, installing PHPUnit through PEAR <em>should</em> provide a systemwide tool, but when you're working on multiple workstations and deploy to different hosting setups its just nice to know you have everything within reach. Besides, my MAMP setup on OSX Lion didn't play nice with PEAR <strong>at all</strong> so enough excuses to write an installer shell.</p>

<h2>What it does</h2>

<p>It's quite simple really, it downloads all the files and folders that PHPUnit needs, makes them into a nice package and moves them into the <code>app</code> folder, ready for you to play with!</p>

<h2>How do I get it</h2>

<p>I just pushed it to Github: [Get the installer Shell here][1]</p>

<p>The README there provides you with the rest of the information.</p>

<p>I'll post some updates on my journey when I can, meanwhile: If you have any optimialisations, ideas on Unit Testing in general or some good pointers .. let me know!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use GZip with PHP]]></title>
    <link href="http://hyra.github.com/use-gzip-with-php/"/>
    <updated>2011-10-14T09:35:00+02:00</updated>
    <id>http://hyra.github.com/use-gzip-with-php</id>
    <content type="html"><![CDATA[<p>I recently started using GZip headers in my websites and the results are simply amazing. Right up there with coffee, sneezing polar bears and green traffic lights.</p>

<p>Nowadays, files are big. People used to optimize graphics and CSS stylesheets. This day and age we just don't care anymore. At the same time bandwidth is getting more expensive and the mobile market is growing bigger. Not a good combination.</p>

<!--more-->


<h2>Enter GZip</h2>

<p>Adding GZip to your applications couldn't be simpler, and using this compression to your output can reduce the amount of data being sent by around <strong>70-80%</strong> for your average stylesheets. That's what you call weight-loss.</p>

<p>I recently built the backend of a mobile application, which relied on a JSON interface. Data being sent to the phone was around <code>250kb</code>. Optimizing the content, only returning the bare minimum the phone needed to work resulted in the file being <code>197kb</code>. So, I added the GZip compression and guess what. The resulting file was <code>14kb</code>. Awesome.</p>

<h2>So how do I use it</h2>

<p>Simple. At the top of your PHP file you add the following:</p>

<pre><code>@ob_start ('ob_gzhandler');
header('Content-type: text/html; charset: UTF-8');
header('Cache-Control: must-revalidate');
header("Expires: " . gmdate('D, d M Y H:i:s', time() - 1) . ' GMT');
</code></pre>

<p>This will tell the server to first zip the contents, before sending it back to the client, where it is deflated.</p>

<p>The only caveat is that you must have <code>mod_gzip</code> installed as an Apache module, but most hosting providers install this by default. Just make sure yours does too.</p>

<h2>As a CakePHP component</h2>

<p><a href="http://josediazgonzalez.com/" title="Jose Gonzales">Jose Gonzales</a> made a nice little plugin to use GZip in your Cake Applications. Find it at <a href="https://github.com/josegonzalez/gzip-component/" title="CakePHP Gzip Component">Github</a> Basically, all you have to do is add the plugin to your <code>plugins</code> folder, and then add the following to your <code>app_controller.php</code></p>

<pre><code>var $components = array('Gzip.Gzip');
</code></pre>

<p>And you're good to go.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
</feed>

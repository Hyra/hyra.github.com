<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: KnockoutJS | Mindthecode - Rambling about code]]></title>
  <link href="http://mindthecode.com/blog/categories/knockoutjs/atom.xml" rel="self"/>
  <link href="http://mindthecode.com/"/>
  <updated>2012-11-01T10:08:43+01:00</updated>
  <id>http://mindthecode.com/</id>
  <author>
    <name><![CDATA[Stef van den Ham]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Format associative JSON to work with Knockout.js]]></title>
    <link href="http://mindthecode.com/format-associative-json-to-work-with-knockout-js/"/>
    <updated>2012-05-09T10:43:00+02:00</updated>
    <id>http://mindthecode.com/format-associative-json-to-work-with-knockout-js</id>
    <content type="html"><![CDATA[<p>I recently started creating a RESTful API in CakePHP to work with a Knockout.js frontend.</p>

<p>While Knockout.js is a lot of fun, it does expect your JSON to be in a certain format.</p>

<!--more-->


<p>Take the following response from a simple <code>find</code> action:</p>

<pre><code>"Projects": [
    {
        "Project": {
            "id": "151",
            "title": "Een ander project",
            "slug": "een-ander-project",
            "description": "dsfdsfs",
            "tasks_count": "2",
            "tasks_backlog": "2",
            "tasks_open": "0",
            "tasks_closed": "0",
            "duedate": "2012-04-09",
            "created": "2012-04-09 13:52:19",
            "modified": "2012-04-09 13:52:19"
        },
        "Task": [ ]
    },
    {
        "Project": {
            "id": "152",
            "title": "Een ander project",
            "slug": "een-ander-project-1",
            "description": "dsfdsfs",
            "tasks_count": null,
            "tasks_backlog": null,
            "tasks_open": null,
            "tasks_closed": null,
            "duedate": "2012-04-09",
            "created": "2012-04-09 13:55:30",
            "modified": "2012-04-09 13:55:30"
        },
        "Task": [ ]
    },
</code></pre>

<p>This is fine to work with in your typical View, but Knockout rather has a nested format, and doesn't like the leading <code>Project</code> nodes. You could write custom parsers in Knockout, but would quickly become a hell to maintain.</p>

<p>Instead, I wrote a little function to reformat the response to get the result Knockout likes:</p>

<pre><code>public function formatResponse($data) {
    $ret = array();
    foreach($data as $key) {
        $keys = array_keys($key);
        $t = $key[$keys[0]];
        for($i=1; $i&lt;count($keys); $i++) {
            $t[Inflector::pluralize(strtolower($keys[$i]))] = $key[$keys[$i]];
        }
        $ret[] = $t;
    }

    return $ret;
}

$projects = $this-&gt;Project-&gt;find('all');
$projects = $this-&gt;formatResponse($projects);
$this-&gt;set(compact('projects'));
$this-&gt;set('_serialize', array('projects'));
</code></pre>

<p>This will reformat the Projects response to:</p>

<pre><code>"projects": [
    {
        "id": "151",
        "title": "Een ander project",
        "slug": "een-ander-project",
        "description": "dsfdsfs",
        "tasks_count": "2",
        "tasks_backlog": "2",
        "tasks_open": "0",
        "tasks_closed": "0",
        "duedate": "2012-04-09",
        "created": "2012-04-09 13:52:19",
        "modified": "2012-04-09 13:52:19",
        "tasks": [ ]
    },
    {
        "id": "152",
        "title": "Een ander project",
        "slug": "een-ander-project-1",
        "description": "dsfdsfs",
        "tasks_count": null,
        "tasks_backlog": null,
        "tasks_open": null,
        "tasks_closed": null,
        "duedate": "2012-04-09",
        "created": "2012-04-09 13:55:30",
        "modified": "2012-04-09 13:55:30",
        "tasks": [ ]
    },
</code></pre>

<p>This way I don't have to worry about modifying the core of how Knockout.js works with JSON, and focus on developing the front-end of my app instead.</p>

<p>It will probably be classier to put the function in something like an <code>afterFind</code>, but for now it will do nicely.</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Mindthecode Feed]]></title><description><![CDATA[Mindthecode Feed]]></description><link>http://mindthecode.com/</link><generator>RSS for Node</generator><lastBuildDate>Sun, 21 Sep 2014 14:58:32 GMT</lastBuildDate><atom:link href="http://mindthecode.com/feed.xml" rel="self" type="application/rss+xml"/><author><![CDATA[Stef van den Ham]]></author><pubDate>Sun, 21 Sep 2014 14:58:32 GMT</pubDate><copyright><![CDATA[2014 Stef van den Ham]]></copyright><language><![CDATA[en]]></language><managingEditor><![CDATA[Stef van den Ham]]></managingEditor><webMaster><![CDATA[Stef van den Ham]]></webMaster><ttl>60</ttl><item><title><![CDATA[Writing Browserify modules for your Angular app]]></title><description><![CDATA[<p>Following up on my previous <a href="/lets-build-an-angularjs-app-with-browserify-and-gulp/">Let&#39;s Build an angular app with Browserify</a> post I got a few questions on how to create modules for your app. Let me show you.</p>
<p>If you haven&#39;t already, make sure you&#39;ve read the <a href="/lets-build-an-angularjs-app-with-browserify-and-gulp/">walkthrough</a> on how to set up the environment to work with Browserify and Gulp, so you can follow along.</p>
<p>Basically, what you do when you <code>require()</code> a module, is looking for what the script you require exposes to the outside world through <code>module.exports</code>. This is following the <a href="http://en.wikipedia.org/wiki/CommonJS">CommonJS</a> spec. This allows us to encapsulate functionality privately within our module, and only export the &#39;public&#39; methods or variables to the outside world.</p>
<p>Now, what does this look like for our Browserify Angular app?</p>
<h2><a name="a-controller-module" class="anchor" href="#a-controller-module"><span class="header-link"></span></a>A Controller module</h2>
<p>Let&#39;s assume we&#39;re using ui-router for the awesome stateprovider, and want to specify one of our own controllers through <code>require()</code></p>
<pre><code class="lang-javascript"><div class="highlight"><pre><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;uiRouter&#39;</span><span class="p">]);</span>

<span class="nx">$stateProvider</span>

  <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">&#39;about&#39;</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">views</span><span class="o">:</span> <span class="p">{</span>
      <span class="s1">&#39;contents&#39;</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">controller</span><span class="o">:</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./controllers/AboutCtrl&#39;</span><span class="p">).</span><span class="nx">inject</span><span class="p">(</span><span class="nx">app</span><span class="p">),</span>
        <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;/views/home.html&#39;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">});</span>
</pre></div>
</code></pre>
<p>What we do here is not that much different from the plain old way, but instead of including a script tag to <code>controllers/AboutCtrl.js</code> and using the name, we call <code>require()</code> on our module, and call <code>.injdect(app)</code> on it.</p>
<p>This works, because our module exports an angular controller object, which it is able to do because we inject our app. Here&#39;s what it looks like:</p>
<pre><code class="lang-javascript"><div class="highlight"><pre><span class="nx">exports</span><span class="p">.</span><span class="nx">inject</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;AboutCtrl&#39;</span><span class="p">,</span> <span class="nx">exports</span><span class="p">.</span><span class="nx">controller</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">exports</span><span class="p">.</span><span class="nx">controller</span><span class="p">;</span>
<span class="p">};</span>

<span class="nx">exports</span><span class="p">.</span><span class="nx">controller</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">AboutCtrl</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">regularAngular</span> <span class="o">=</span> <span class="s1">&#39;Hello!&#39;</span><span class="p">;</span>
<span class="p">};</span>
</pre></div>
</code></pre>
<p>As you can see, our inject function takes the app, and in turn returns our controller function. Simple, clean and effective.</p>
<h2><a name="dependency-injection" class="anchor" href="#dependency-injection"><span class="header-link"></span></a>Dependency injection</h2>
<p>But what if we want to use a dependency. Simply require it and inject it:</p>
<pre><code class="lang-javascript"><div class="highlight"><pre><span class="nx">exports</span><span class="p">.</span><span class="nx">inject</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./../services/SomeService&#39;</span><span class="p">).</span><span class="nx">inject</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span> <span class="c1">// Require the someservice module</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;AboutCtrl&#39;</span><span class="p">,</span> <span class="nx">exports</span><span class="p">.</span><span class="nx">controller</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">exports</span><span class="p">.</span><span class="nx">controller</span><span class="p">;</span>
<span class="p">};</span>

<span class="c1">// Pass the SomeService as parameter</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">controller</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">AboutCtrl</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">SomeService</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// And profit.</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">regularAngular</span> <span class="o">=</span> <span class="nx">SomeService</span><span class="p">.</span><span class="nx">getYourStuff</span><span class="p">();</span>
<span class="p">};</span>
</pre></div>
</code></pre>
<p>This is how that SomeService would look like. Not much different, but instead of exposing a controller, we return a factory:</p>
<pre><code class="lang-javascript"><div class="highlight"><pre><span class="nx">exports</span><span class="p">.</span><span class="nx">inject</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;SomeService&#39;</span><span class="p">,</span> <span class="nx">exports</span><span class="p">.</span><span class="nx">factory</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">exports</span><span class="p">.</span><span class="nx">factory</span><span class="p">;</span>
<span class="p">};</span>

<span class="c1">// Any extra dependencies can just be passed in</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">factory</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$http</span><span class="p">,</span> <span class="nx">$cookieStore</span><span class="p">,</span> <span class="nx">$resource</span><span class="p">)</span> <span class="p">{</span>

  <span class="kd">var</span> <span class="nx">monkey</span> <span class="o">=</span> <span class="s1">&#39;Strawberry&#39;</span><span class="p">;</span>

  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">getYourStuff</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">monkey</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">};</span>
</pre></div>
</code></pre>
<p>And that&#39;s how we can write little re-usable modules to use in our Angular App!</p>
<p>I hope the above helps, and if you have any questions feel free to ask.</p>
<p>Happy coding.</p>
]]></description><link>http://mindthecode.com/writing-browserify-modules-for-your-angular-app/</link><guid isPermaLink="true">http://mindthecode.com/writing-browserify-modules-for-your-angular-app/</guid><category><![CDATA[phantomjs]]></category><category><![CDATA[node]]></category><category><![CDATA[ffmpeg]]></category><dc:creator><![CDATA[Stef van den Ham]]></dc:creator><pubDate>Tue, 03 Jun 2014 11:50:00 GMT</pubDate></item><item><title><![CDATA[Recording a website with PhantomJS and FFMpeg]]></title><description><![CDATA[<p>When I realised you could easily generate screenshots from a site with PhantomJS I just needed to know if I could take it one step further, and record a video. </p>
<h2><a name="the-goal" class="anchor" href="#the-goal"><span class="header-link"></span></a>The goal</h2>
<p>What I wanted was to record 10 seconds of video from a random website and output it as a .mp4. For this short demo I decided we should go with one of the fun examples on Pixi.JS as they&#39;re interesting to capture.</p>
<p>Here it is, a <a href="http://www.goodboydigital.com/pixijs/examples/12-2/" target="_blank">Pixi dragon</a></p>
<h2><a name="the-ingredients" class="anchor" href="#the-ingredients"><span class="header-link"></span></a>The ingredients</h2>
<h3><a name="phantomjs" class="anchor" href="#phantomjs"><span class="header-link"></span></a>PhantomJS</h3>
<p>In case you&#39;ve been hiding, <a href="http://phantomjs.org/">PhantomJS</a> is a headless scriptable webkit browser with a Javascript API. We will use it to generate screenshots of a site.</p>
<h3><a name="ffmpeg" class="anchor" href="#ffmpeg"><span class="header-link"></span></a>FFMPeg</h3>
<p><a href="http://www.ffmpeg.org/">FFMPeg</a> is our all purpose video and audio toolbox to record, convert and stream on the command line. </p>
<p>With these two tools installed we are ready to create a video.</p>
<h2><a name="from-the-top" class="anchor" href="#from-the-top"><span class="header-link"></span></a>From the top</h2>
<p>Capturing a webpage as an image with PhantomJS is easy stuff. They have a example on how to do this <a href="https://github.com/ariya/phantomjs/blob/master/examples/technews.js">over here</a>, so let&#39;s strip it down to what we need and save it as <code>runner.js</code></p>
<pre><code><div class="highlight"><pre><span class="kd">var</span> <span class="nx">page</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;webpage&#39;</span><span class="p">).</span><span class="nx">create</span><span class="p">();</span>
<span class="nx">page</span><span class="p">.</span><span class="nx">viewportSize</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">width</span><span class="o">:</span> <span class="mi">640</span><span class="p">,</span> <span class="nx">height</span><span class="o">:</span> <span class="mi">480</span> <span class="p">};</span>

<span class="nx">page</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">&#39;http://www.goodboydigital.com/pixijs/examples/12-2/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">page</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;dragon.png&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">format</span><span class="o">:</span> <span class="s2">&quot;png&quot;</span> <span class="p">});</span>
  <span class="nx">phantom</span><span class="p">.</span><span class="nx">exit</span><span class="p">();</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>We can now run this with:</p>
<pre><code class="lang-bash"><div class="highlight"><pre><span class="nv">$ </span>phantomjs runner.js
</pre></div>
</code></pre>
<p>After a few moments PhantomJS will have booted up and rendered an image. But .. it&#39;s white! That&#39;s because PhantomJS takes the image before the <code>&lt;canvas&gt;</code> has actually fully loaded and started the animation. Let&#39;s add a little delay before we write the image.</p>
<pre><code><div class="highlight"><pre><span class="kd">var</span> <span class="nx">page</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;webpage&#39;</span><span class="p">).</span><span class="nx">create</span><span class="p">();</span>
<span class="nx">page</span><span class="p">.</span><span class="nx">viewportSize</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">width</span><span class="o">:</span> <span class="mi">640</span><span class="p">,</span> <span class="nx">height</span><span class="o">:</span> <span class="mi">480</span> <span class="p">};</span>

<span class="nx">page</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">&#39;http://www.goodboydigital.com/pixijs/examples/12-2/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// Add a little delay before capturing the image</span>
    <span class="nx">page</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;dragon.png&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">format</span><span class="o">:</span> <span class="s2">&quot;png&quot;</span> <span class="p">});</span>
    <span class="nx">phantom</span><span class="p">.</span><span class="nx">exit</span><span class="p">();</span>
  <span class="p">},</span> <span class="mi">666</span><span class="p">);</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>This time, you should end up with an image of .. a dragon!</p>
<p><img src="/images/screenshots/dragon01.png" alt="Pixi Dragon"></p>
<h2><a name="rendering-multiple-images" class="anchor" href="#rendering-multiple-images"><span class="header-link"></span></a>Rendering multiple images</h2>
<p>From here it&#39;s easy enough to render multiple images with an interval. Create a folder <code>frames</code> and modify the runner code to capture 50 images:</p>
<pre><code><div class="highlight"><pre><span class="kd">var</span> <span class="nx">page</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;webpage&#39;</span><span class="p">).</span><span class="nx">create</span><span class="p">();</span>
<span class="nx">page</span><span class="p">.</span><span class="nx">viewportSize</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">width</span><span class="o">:</span> <span class="mi">640</span><span class="p">,</span> <span class="nx">height</span><span class="o">:</span> <span class="mi">480</span> <span class="p">};</span>

<span class="nx">page</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">&#39;http://www.goodboydigital.com/pixijs/examples/12-2/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Initial frame</span>
    <span class="kd">var</span> <span class="nx">frame</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="c1">// Add an interval every 25th second</span>
    <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// Render an image with the frame name</span>
      <span class="nx">page</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;frames/dragon&#39;</span><span class="o">+</span><span class="p">(</span><span class="nx">frame</span><span class="o">++</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;.png&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">format</span><span class="o">:</span> <span class="s2">&quot;png&quot;</span> <span class="p">});</span>
      <span class="c1">// Exit after 50 images</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">frame</span> <span class="o">&gt;</span> <span class="mi">50</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">phantom</span><span class="p">.</span><span class="nx">exit</span><span class="p">();</span>
      <span class="p">}</span>
    <span class="p">},</span> <span class="mi">25</span><span class="p">);</span>
  <span class="p">},</span> <span class="mi">666</span><span class="p">);</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>Sweet, we end up with 50 frames of the dragon. When flicking through them it looks like it&#39;s flying, so we&#39;re almost there!</p>
<h2><a name="rendering-a-movie" class="anchor" href="#rendering-a-movie"><span class="header-link"></span></a>Rendering a movie</h2>
<p>Now we know how to get the frames we want, we need to figure out how to feed them to ffmpeg. Traditionally, one would first render all the frames and then use an ffmpeg command to stitch the images to a movie. This would look a bit like this:</p>
<pre><code class="lang-bash"><div class="highlight"><pre><span class="nv">$ </span>ffmpeg -start_number 10 -i frames/dragon%02d.png -c:v libx264 -r 25 -pix_fmt yuv420p out.mp4
</pre></div>
</code></pre>
<p>Notice I added a <code>-start_number</code> parameter because the frames we generated don&#39;t have a leading 0.</p>
<p>So, at this point we have a movie from the site we wanted. Good stuff, but we can do better. Wouldn&#39;t it be nice if we could squeeze it all in one command? We can! If we modify the runner code to output images to the terminal, we can pipe it as food to ffmpeg, which accepts the <code>image2pipe</code> parameter.</p>
<p>Let&#39;s alter the render method a bit:</p>
<pre><code><div class="highlight"><pre><span class="kd">var</span> <span class="nx">page</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;webpage&#39;</span><span class="p">).</span><span class="nx">create</span><span class="p">();</span>
<span class="nx">page</span><span class="p">.</span><span class="nx">viewportSize</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">width</span><span class="o">:</span> <span class="mi">640</span><span class="p">,</span> <span class="nx">height</span><span class="o">:</span> <span class="mi">480</span> <span class="p">};</span>

<span class="nx">page</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">&#39;http://www.goodboydigital.com/pixijs/examples/12-2/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">page</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;/dev/stdout&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">format</span><span class="o">:</span> <span class="s2">&quot;png&quot;</span> <span class="p">});</span>
  <span class="p">},</span> <span class="mi">25</span><span class="p">);</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>We have removed the timeout as we don&#39;t need it anymore and we took out the frame counting code as we will tell ffmpeg how long to record for.</p>
<p>Now, when we run the runner again, the CLI will throw raw image data at us, so don&#39;t! :)</p>
<p>Instead, let&#39;s add a pipe to it and feed that juicy image data to ffmpeg instead, who can devour it much better than we can:</p>
<pre><code class="lang-bash"><div class="highlight"><pre><span class="nv">$ </span>phantomjs runner.js <span class="p">|</span> ffmpeg -y -c:v png -f image2pipe -r 25 -t 10  -i - -c:v libx264 -pix_fmt yuv420p -movflags +faststart dragon.mp4
</pre></div>
</code></pre>
<p>This might take a while, but eventually you will end up with a file <code>dragon.mp4</code> that&#39;s a lot smoother than our first attempt. This is because we feed a lot more images to ffmpeg.</p>
<p>The important flags to notice in the ffmpeg command is <code>-t 10</code> which tells it to limit the capture to 10 seconds, and <code>-f image2pipe</code> because it tells ffmpeg to listen to the image stream we created.</p>
<p><img src="/images/screenshots/dragon.gif" alt="Pixi Dragon"></p>
<h2><a name="wrapping-it-up" class="anchor" href="#wrapping-it-up"><span class="header-link"></span></a>Wrapping it up</h2>
<p>And there we go. We can stream images through PhantomJS and feed them to ffmpeg to create a movie. I haven&#39;t thought of a practical purpose for this, but maybe someone else will.</p>
<p>I hope you like the proof of concept.</p>
<p>Happy coding!</p>
]]></description><link>http://mindthecode.com/recording-a-website-with-phantomjs-and-ffmpeg/</link><guid isPermaLink="true">http://mindthecode.com/recording-a-website-with-phantomjs-and-ffmpeg/</guid><category><![CDATA[phantomjs]]></category><category><![CDATA[node]]></category><category><![CDATA[ffmpeg]]></category><dc:creator><![CDATA[Stef van den Ham]]></dc:creator><pubDate>Sun, 25 May 2014 11:50:00 GMT</pubDate></item><item><title><![CDATA[Let's build: An AngularJS app with Browserify and Gulp]]></title><description><![CDATA[<p>Today I want to show a generic workflow and setup I have used a lot lately when working on building apps with Angular. It uses Gulp as a CI system and Browserify to minimize code clutter and maximize awesomeness. So let&#39;s jump in.</p>
<p>Instead of starting from a cloned code repository let&#39;s build our setup together. From scratch. This way you know what each piece does, and allows you to tweak it to your liking. Of course, the final product can be found <a href="https://github.com/Hyra/angular-gulp-browserify-livereload-boilerplate">here</a> at Github, but it might be better to use it as a reference rather than a starting point.</p>
<h2><a name="folder-structure" class="anchor" href="#folder-structure"><span class="header-link"></span></a>Folder structure</h2>
<p>When building a web application I tend to have an <code>app</code> folder for the original source files, and a <code>dist</code> folder which contains all the processed files and will serve as the root directory for the webserver. So let&#39;s create the following folder structure:</p>
<pre><code><div class="highlight"><pre><span class="nx">app</span>
  <span class="nx">index</span><span class="p">.</span><span class="nx">html</span>
  <span class="nx">images</span>            <span class="c1">// Visual assets</span>
  <span class="nx">scripts</span>           <span class="c1">// Your javascript</span>
     <span class="nx">controllers</span>
     <span class="nx">directives</span>
     <span class="nx">services</span>
     <span class="nx">main</span><span class="p">.</span><span class="nx">js</span>        <span class="c1">// Single main entry point</span>
  <span class="nx">styles</span>            <span class="c1">// SCSS or LESS or CSS files</span>
  <span class="nx">views</span>             <span class="c1">// Templates</span>
<span class="nx">dist</span>                <span class="c1">// The target and &#39;www&#39; folder</span>
<span class="nx">Gulpfile</span><span class="p">.</span><span class="nx">js</span>         <span class="c1">// Gulp instructions file</span>
<span class="kr">package</span><span class="p">.</span><span class="nx">json</span>        <span class="c1">// Package file with installation references</span>
</pre></div>
</code></pre>
<h2><a name="getting-some-modules" class="anchor" href="#getting-some-modules"><span class="header-link"></span></a>Getting some modules</h2>
<p>To get everything up and running, let&#39;s first get some NPM modules we want to work with. Depending on your personal preferences you might want to replace some of them or add other ones to suit your specific needs. The modules I usually install are:</p>
<h3><a name="gulp" class="anchor" href="#gulp"><span class="header-link"></span></a>Gulp</h3>
<p>This is the workhorse of our setup.</p>
<h3><a name="angular" class="anchor" href="#angular"><span class="header-link"></span></a>Angular</h3>
<p>We will install Angular through NPM so we can require it with browserify.</p>
<h3><a name="browserify" class="anchor" href="#browserify"><span class="header-link"></span></a>Browserify</h3>
<p>Browserify allows us to utilize the <code>require()</code> syntax we love in NodeJS in our front-end. Can you spell u.n.i.c.o.r.n.s ?</p>
<h3><a name="gulp-browserify" class="anchor" href="#gulp-browserify"><span class="header-link"></span></a>gulp-browserify</h3>
<p>This allows us to run Browserify from within our Gulpfile.</p>
<h3><a name="gulp-clean" class="anchor" href="#gulp-clean"><span class="header-link"></span></a>gulp-clean</h3>
<p>Allows us to clean (empty) a folder or file, which is nice to make sure we don&#39;t end up with any artifacts.</p>
<h3><a name="gulp-concat" class="anchor" href="#gulp-concat"><span class="header-link"></span></a>gulp-concat</h3>
<p>When using browserify for our code we want to concat it to a single bundled javascript file. This plugin allows us to do just that.</p>
<h3><a name="gulp-jshint" class="anchor" href="#gulp-jshint"><span class="header-link"></span></a>gulp-jshint</h3>
<p>We all love syntactically correct code, don&#39;t we? This plugin checks your javascript files and tells you when something is wrong. Or not pretty enough.</p>
<h3><a name="gulp-util" class="anchor" href="#gulp-util"><span class="header-link"></span></a>gulp-util</h3>
<p>General gulp utilities, such as colour in your <code>gutil.log()</code> calls, and handy methods for common operations such as <code>replaceExtension()</code> and <code>noop()</code>.</p>
<h3><a name="gulp-embedlr-gulp-livereload-tiny-lr-connect-livereload-express" class="anchor" href="#gulp-embedlr-gulp-livereload-tiny-lr-connect-livereload-express"><span class="header-link"></span></a>gulp-embedlr, gulp-livereload, tiny-lr, connect-livereload, express</h3>
<p>These I use so I can run a local webserver and support live reloading of the app as we save files.</p>
<p>And this will do fine for now. So! Let&#39;s install all these babies, and save them to our <code>package.json</code> by adding <code>--save-dev</code></p>
<pre><code class="lang-bash"><div class="highlight"><pre><span class="nv">$ </span>npm install gulp browserify gulp-browserify gulp-clean gulp-concat gulp-jshint gulp-util gulp-embedlr gulp-livereload tiny-lr connect-livereload express --save-dev
</pre></div>
</code></pre>
<h2><a name="configuring-our-gulpfile" class="anchor" href="#configuring-our-gulpfile"><span class="header-link"></span></a>Configuring our Gulpfile</h2>
<p>Now we have all the components in place it&#39;s time to write our Gulpfile. Let&#39;s start small and expand as we go along.</p>
<p>First, let&#39;s make sure we can <code>watch</code> our javascript files, and as they change, run them through JSHint and have Browserify bundle the code into a single file:</p>
<pre><code><div class="highlight"><pre><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">),</span>
    <span class="nx">gutil</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-util&#39;</span><span class="p">),</span>
    <span class="nx">jshint</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-jshint&#39;</span><span class="p">),</span>
    <span class="nx">browserify</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-browserify&#39;</span><span class="p">),</span>
    <span class="nx">concat</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-concat&#39;</span><span class="p">),</span>
    <span class="nx">clean</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-clean&#39;</span><span class="p">);</span>

<span class="c1">// JSHint task</span>
<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;lint&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;./app/scripts/*.js&#39;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">jshint</span><span class="p">())</span>
  <span class="c1">// You can look into pretty reporters as well, but that&#39;s another story</span>
  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">jshint</span><span class="p">.</span><span class="nx">reporter</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">));</span>
<span class="p">});</span>

<span class="c1">// Browserify task</span>
<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;browserify&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Single point of entry (make sure not to src ALL your files, browserify will figure it out for you)</span>
  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">([</span><span class="s1">&#39;app/scripts/main.js&#39;</span><span class="p">])</span>
  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">browserify</span><span class="p">({</span>
    <span class="nx">insertGlobals</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nx">debug</span><span class="o">:</span> <span class="kc">true</span>
  <span class="p">}))</span>
  <span class="c1">// Bundle to a single file</span>
  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">concat</span><span class="p">(</span><span class="s1">&#39;bundle.js&#39;</span><span class="p">))</span>
  <span class="c1">// Output it to our dist folder</span>
  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;dist/js&#39;</span><span class="p">));</span>
<span class="p">});</span>

<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;watch&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;lint&#39;</span><span class="p">],</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Watch our scripts</span>
  <span class="nx">gulp</span><span class="p">.</span><span class="nx">watch</span><span class="p">([</span><span class="s1">&#39;app/scripts/*.js&#39;</span><span class="p">,</span> <span class="s1">&#39;app/scripts/**/*.js&#39;</span><span class="p">],[</span>
    <span class="s1">&#39;lint&#39;</span><span class="p">,</span>
    <span class="s1">&#39;browserify&#39;</span>
  <span class="p">]);</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>So far so good! Whenever we change code in our javascript files a fresh bundle.js is created for us to use in our site.</p>
<h2><a name="set-up-our-index-html-file" class="anchor" href="#set-up-our-index-html-file"><span class="header-link"></span></a>Set up our index.html file</h2>
<p>Let&#39;s create a simple <code>index.html</code> file so we can see our work in the browser. Open up <code>index.html</code> and add something like the following:</p>
<pre><code class="lang-html"><div class="highlight"><pre><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span> <span class="na">ng-app=</span><span class="s">&quot;myApp&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;title&gt;</span>My Awesome App<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body</span> <span class="na">ng-controller=</span><span class="s">&#39;WelcomeCtrl&#39;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h1&gt;</span>My Awesome App<span class="nt">&lt;/h1&gt;</span>
  <span class="nt">&lt;p&gt;</span>{{testVar}}<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/bundle.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</code></pre>
<p>The above should look familiar. We include our bundle.js file we created earlier at the bottom, initiate a ng-app by adding the directive to the html tag, attach a controller to the body and have a simple variable in the body so we can see if things work. Which at this point is a NO. Let&#39;s fix that.</p>
<p>First of all, we want this index.html file to be added to our <code>dist</code> folder so we can actually serve it. We can do this by adding an extra task:</p>
<pre><code><div class="highlight"><pre><span class="c1">// Views task</span>
<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;views&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Get our index.html</span>
  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;app/index.html&#39;</span><span class="p">)</span>
  <span class="c1">// And put it in the dist folder</span>
  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;dist/&#39;</span><span class="p">));</span>

  <span class="c1">// Any other view files from app/views</span>
  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;./app/views/**/*&#39;</span><span class="p">)</span>
  <span class="c1">// Will be put in the dist/views folder</span>
  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;dist/views/&#39;</span><span class="p">));</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>We can also set up another watcher in the watch task to pick up any changes as we build:</p>
<pre><code><div class="highlight"><pre><span class="nx">gulp</span><span class="p">.</span><span class="nx">watch</span><span class="p">([</span><span class="s1">&#39;app/index.html&#39;</span><span class="p">,</span> <span class="s1">&#39;app/views/**/*.html&#39;</span><span class="p">],</span> <span class="p">[</span>
  <span class="s1">&#39;views&#39;</span>
<span class="p">]);</span>
</pre></div>
</code></pre>
<p>At the moment we pretty much have a working app. We just can&#39;t see it. Let&#39;s change this by adding a self contained webserver, straight from our Gulp.</p>
<h2><a name="webserver-with-live-reload" class="anchor" href="#webserver-with-live-reload"><span class="header-link"></span></a>Webserver with live reload</h2>
<p>First of all, we need to add some modules to our Gulpfile that allows us to run a mini express server.</p>
<pre><code><div class="highlight"><pre><span class="kd">var</span> <span class="nx">embedlr</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-embedlr&#39;</span><span class="p">),</span>
    <span class="nx">refresh</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-livereload&#39;</span><span class="p">),</span>
    <span class="nx">lrserver</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;tiny-lr&#39;</span><span class="p">)(),</span>
    <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">),</span>
    <span class="nx">livereload</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;connect-livereload&#39;</span><span class="p">),</span>
    <span class="nx">livereloadport</span> <span class="o">=</span> <span class="mi">35729</span><span class="p">,</span>
    <span class="nx">serverport</span> <span class="o">=</span> <span class="mi">5000</span><span class="p">;</span>

<span class="c1">// Set up an express server (but not starting it yet)</span>
<span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
<span class="c1">// Add live reload</span>
<span class="nx">server</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">livereload</span><span class="p">({</span><span class="nx">port</span><span class="o">:</span> <span class="nx">livereloadport</span><span class="p">}));</span>
<span class="c1">// Use our &#39;dist&#39; folder as rootfolder</span>
<span class="nx">server</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="s1">&#39;./dist&#39;</span><span class="p">));</span>
<span class="c1">// Because I like HTML5 pushstate .. this redirects everything back to our index.html</span>
<span class="nx">server</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="s1">&#39;/*&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">sendfile</span><span class="p">(</span><span class="s1">&#39;index.html&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">root</span><span class="o">:</span> <span class="s1">&#39;dist&#39;</span> <span class="p">});</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>Next, let&#39;s start the server. You can do this from any task, but let&#39;s create a <code>dev</code> task for the fun of it.</p>
<pre><code><div class="highlight"><pre><span class="c1">// Dev task</span>
<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;dev&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Start webserver</span>
  <span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">serverport</span><span class="p">);</span>
  <span class="c1">// Start live reload</span>
  <span class="nx">lrserver</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">livereloadport</span><span class="p">);</span>
  <span class="c1">// Run the watch task, to keep taps on changes</span>
  <span class="nx">gulp</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="s1">&#39;watch&#39;</span><span class="p">);</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>Now, when you run <code>gulp dev</code> it will kickstart our internal webserver with our <code>dist</code> folder as root. You can verify everything is working by navigating to <a href="http://localhost:5000">http://localhost:5000</a></p>
<p>If all is well you should see the <code>index.html</code> show up. Whenever you change a file however, the changes won&#39;t automatically show up in the browser. This is because we have to manually invoke the server refresh from within our task. Let&#39;s modify our <code>views</code> task to automatically refresh the browser after it has done its work:</p>
<pre><code><div class="highlight"><pre><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;views&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;./app/index.html&#39;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;dist/&#39;</span><span class="p">));</span>

  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;./app/views/**/*&#39;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;dist/views/&#39;</span><span class="p">))</span>
  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">refresh</span><span class="p">(</span><span class="nx">lrserver</span><span class="p">));</span> <span class="c1">// Tell the lrserver to refresh</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>Now, whenever you change a view file, the server will reload. Of course, you can do this whenever you want. So feel free to add it in the <code>browserify</code> task as well.</p>
<h2><a name="add-some-angular" class="anchor" href="#add-some-angular"><span class="header-link"></span></a>Add some Angular</h2>
<p>We are getting somewhere. All that&#39;s missing is some actual Angular code. So let&#39;s add some. Open up the <code>main.js</code> file and put in the following:</p>
<pre><code><div class="highlight"><pre><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">angular</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;angular&#39;</span><span class="p">);</span> <span class="c1">// That&#39;s right! We can just require angular as if we were in node</span>

<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">,</span> <span class="p">[]);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;HelloCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">test</span> <span class="o">=</span> <span class="s1">&#39;Test varretjes&#39;</span><span class="p">;</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>In main.js we can now use Node&#39;s <code>require()</code> way to include modules we want. This is not limited to our own code, we can use most of the ~50k published modules on npmjs.org. When we run <code>gulp browserify</code> Browserify will figure out what code to pull in, and will bundle it in our <code>bundle.js</code>. Good stuff.</p>
<p>Of course, the controller code should move to a file of its own in the controllers directory so we can actually use the <code>require</code> technique. So let&#39;s do just that.</p>
<p>Create a new file <code>controllers/WelcomeCtrl.js</code> and add in the following:</p>
<pre><code><div class="highlight"><pre><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">WelcomeCtrl</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">testVar</span> <span class="o">=</span> <span class="s1">&#39;We are up and running from a required module!&#39;</span><span class="p">;</span>
<span class="p">};</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">WelcomeCtrl</span><span class="p">;</span>
</pre></div>
</code></pre>
<p>Notice we use <code>module.exports</code> to expose (parts of) our code, as you do with modules. This way we can <code>require</code> them from our <code>main.js</code> file and use it as a module. Let&#39;s change <code>main.js</code> to use our fresh module:</p>
<pre><code><div class="highlight"><pre><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">angular</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;angular&#39;</span><span class="p">);</span> <span class="c1">// That&#39;s right! We can just require angular as if we were in node</span>

<span class="kd">var</span> <span class="nx">WelcomeCtrl</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./controllers/WelcomeCtrl&#39;</span><span class="p">);</span> <span class="c1">// We can use our WelcomeCtrl.js as a module. Rainbows.</span>

<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">,</span> <span class="p">[]);</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;WelcomeCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="nx">WelcomeCtrl</span><span class="p">]);</span>
</pre></div>
</code></pre>
<p>This is obviously a very bare example, but you can see how using simple <code>require</code> calls will save a lot of script tags in your index.html, and having your files behave as modules helps you write re-usable code.</p>
<h2><a name="jshint-rc" class="anchor" href="#jshint-rc"><span class="header-link"></span></a>JSHint.rc</h2>
<p>You might have noticed <code>gulp lint</code> gives us some errors. That&#39;s because it needs some guidance, as it doesn&#39;t know about our <code>require</code> and preferences. Let&#39;s add a file called <code>.jshintrc</code> and add in the following configuration:</p>
<pre><code><div class="highlight"><pre><span class="p">{</span>
  <span class="s2">&quot;node&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="s2">&quot;browser&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="s2">&quot;esnext&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="s2">&quot;bitwise&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="s2">&quot;camelcase&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="s2">&quot;curly&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="s2">&quot;eqeqeq&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="s2">&quot;immed&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="s2">&quot;indent&quot;</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
  <span class="s2">&quot;latedef&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="s2">&quot;newcap&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="s2">&quot;noarg&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="s2">&quot;quotmark&quot;</span><span class="o">:</span> <span class="s2">&quot;single&quot;</span><span class="p">,</span>
  <span class="s2">&quot;regexp&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="s2">&quot;undef&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="s2">&quot;unused&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="s2">&quot;strict&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="s2">&quot;trailing&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="s2">&quot;smarttabs&quot;</span><span class="o">:</span> <span class="kc">true</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>You may or may not agree with any of these settings, so feel free to tweak them.</p>
<h2><a name="sass-support" class="anchor" href="#sass-support"><span class="header-link"></span></a>SASS Support</h2>
<p>You may have a CSS pre-processor of choice, so let&#39;s add support for this. I usually go with SASS, but of course this is adaptable to your liking. Let&#39;s install a new module named <code>gulp-sass</code> and include it in our Gulpfile.</p>
<pre><code class="lang-bash"><div class="highlight"><pre><span class="nv">$ </span>npm install gulp-sass gulp-autoprefixer --save-dev
</pre></div>
</code></pre>
<pre><code><div class="highlight"><pre><span class="kd">var</span> <span class="nx">sass</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-sass&#39;</span><span class="p">);</span>
<span class="c1">// Not necessary, but I like this one, it automatically adds prefixes for all browsers</span>
<span class="kd">var</span> <span class="nx">autoprefixer</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-autoprefixer&#39;</span><span class="p">);</span>
</pre></div>
</code></pre>
<p>Next, let&#39;s write a task for it:</p>
<pre><code><div class="highlight"><pre><span class="c1">// Styles task</span>
<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;styles&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;app/styles/*.scss&#39;</span><span class="p">)</span>
  <span class="c1">// The onerror handler prevents Gulp from crashing when you make a mistake in your SASS</span>
  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">sass</span><span class="p">({</span><span class="nx">onError</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span> <span class="p">}</span> <span class="p">}))</span>
  <span class="c1">// Optionally add autoprefixer</span>
  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">autoprefixer</span><span class="p">(</span><span class="s2">&quot;last 2 versions&quot;</span><span class="p">,</span> <span class="s2">&quot;&gt; 1%&quot;</span><span class="p">,</span> <span class="s2">&quot;ie 8&quot;</span><span class="p">))</span>
  <span class="c1">// These last two should look familiar now :)</span>
  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;dist/css/&#39;</span><span class="p">))</span>
  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">refresh</span><span class="p">(</span><span class="nx">lrserver</span><span class="p">));</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>And add another watcher.</p>
<pre><code><div class="highlight"><pre><span class="nx">gulp</span><span class="p">.</span><span class="nx">watch</span><span class="p">([</span><span class="s1">&#39;app/styles/**/*.scss&#39;</span><span class="p">],</span> <span class="p">[</span>
  <span class="s1">&#39;styles&#39;</span>
<span class="p">]);</span>
</pre></div>
</code></pre>
<p>Now, whenever you make changes to your SASS files it will compile it to CSS and live-reload our webserver. Good times.</p>
<h2><a name="wrapping-up" class="anchor" href="#wrapping-up"><span class="header-link"></span></a>Wrapping up</h2>
<p>We&#39;ve done quite a lot. We have set up a webserver, added Gulp to automate all our tasks, added live reloading for easy developing, sass processing, and added support for Browserify so we can script in style.</p>
<p>I created a repository with the above so you can check the finished project, which you can find <a href="https://github.com/Hyra/angular-gulp-browserify-livereload-boilerplate">here</a>.</p>
<p>I hope the above was of some help, and if you have any questions feel free to find me on <a href="http://twitter.com/stefvdham">Twitter</a>, or leave a comment below.</p>
<p>Happy coding.</p>
]]></description><link>http://mindthecode.com/lets-build-an-angularjs-app-with-browserify-and-gulp/</link><guid isPermaLink="true">http://mindthecode.com/lets-build-an-angularjs-app-with-browserify-and-gulp/</guid><category><![CDATA[angularjs]]></category><category><![CDATA[gulp]]></category><category><![CDATA[angular]]></category><category><![CDATA[browserify]]></category><dc:creator><![CDATA[Stef van den Ham]]></dc:creator><pubDate>Mon, 05 May 2014 08:30:00 GMT</pubDate></item><item><title><![CDATA[How to use environment variables in your Angular application]]></title><description><![CDATA[<p>If you develop a website that uses multiple environments such as <strong>development</strong>, <strong>staging</strong> and <strong>production</strong> you probably have a configuration file of sorts to handle things like database settings, mail server credentials, and so on for your backend system.</p>
<p>But how do you handle such variables in the front-end? Specifically, in an AngularJS App?</p>
<p>For instance, you might have a seperate API you&#39;re talking to for your content, which has a different location locally, than on your production server. Or you might want to do some debugging or verbose output, based on what environment you&#39;re on.</p>
<p>In this post I&#39;ll show you how to set this up automagically using Grunt and ngConstant.</p>
<h3><a name="update" class="anchor" href="#update"><span class="header-link"></span></a>UPDATE</h3>
<p><a href="http://werk85.de/">Malte</a> was so kind as to provide an updated configuration for the <em>ngconstant 0.5.0</em> version. The example code in the post has been updated accordingly.</p>
<h2><a name="the-ingredients" class="anchor" href="#the-ingredients"><span class="header-link"></span></a>The ingredients</h2>
<h3><a name="grunt" class="anchor" href="#grunt"><span class="header-link"></span></a>Grunt</h3>
<p>I&#39;ll assume you&#39;re familiar with <a href="http://gruntjs.com/">Grunt</a> and have set it up to aid your workflow. If not, there&#39;s plenty of tutorials out there to get this going.</p>
<h3><a name="grunt-ng-constant" class="anchor" href="#grunt-ng-constant"><span class="header-link"></span></a>grunt-ng-constant</h3>
<p>This Grunt plugin takes care of the dynamic generation of your constants. Grab it <a href="https://github.com/werk85/grunt-ng-constant">here</a>, or simply install it by doing:</p>
<pre><code><div class="highlight"><pre><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">grunt</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">constant</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">dev</span>
</pre></div>
</code></pre>
<h2><a name="automatically-write-your-config-js-file" class="anchor" href="#automatically-write-your-config-js-file"><span class="header-link"></span></a>Automatically write your config.js file</h2>
<p>Now that you have all you need, let&#39;s set it up! Open up your <code>Gruntfile.js</code>, and inside the <code>grunt.initConfig</code> section add the following:</p>
<pre><code><div class="highlight"><pre><span class="nx">ngconstant</span><span class="o">:</span> <span class="p">{</span>
  <span class="c1">// Options for all targets</span>
  <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">space</span><span class="o">:</span> <span class="s1">&#39;  &#39;</span><span class="p">,</span>
    <span class="nx">wrap</span><span class="o">:</span> <span class="s1">&#39;&quot;use strict&quot;;\n\n {%= __ngModule %}&#39;</span><span class="p">,</span>
    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;config&#39;</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="c1">// Environment targets</span>
  <span class="nx">development</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;&lt;%= yeoman.app %&gt;/scripts/config.js&#39;</span>
    <span class="p">},</span>
    <span class="nx">constants</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">ENV</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;development&#39;</span><span class="p">,</span>
        <span class="nx">apiEndpoint</span><span class="o">:</span> <span class="s1">&#39;http://your-development.api.endpoint:3000&#39;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="nx">production</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;&lt;%= yeoman.dist %&gt;/scripts/config.js&#39;</span>
    <span class="p">},</span>
    <span class="nx">constants</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">ENV</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;production&#39;</span><span class="p">,</span>
        <span class="nx">apiEndpoint</span><span class="o">:</span> <span class="s1">&#39;http://api.livesite.com&#39;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">},</span>
</pre></div>
</code></pre>
<p>This tells Grunt about your environments. Each target is told where to write the config file to, and inside <code>constants</code> you define your environmental variables you wish to use in your Angular App.</p>
<p>Next up, we need to tell Grunt when to write this config file. Depending on your Gruntfile you will probably have a section that tells it to run a local server so you can develop your site. Mine usually looks like this:</p>
<pre><code><div class="highlight"><pre><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;serve&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">target</span> <span class="o">===</span> <span class="s1">&#39;dist&#39;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">grunt</span><span class="p">.</span><span class="nx">task</span><span class="p">.</span><span class="nx">run</span><span class="p">([</span><span class="s1">&#39;build&#39;</span><span class="p">,</span> <span class="s1">&#39;connect:dist:keepalive&#39;</span><span class="p">]);</span>
  <span class="p">}</span>

  <span class="nx">grunt</span><span class="p">.</span><span class="nx">task</span><span class="p">.</span><span class="nx">run</span><span class="p">([</span>
    <span class="s1">&#39;clean:server&#39;</span><span class="p">,</span>
    <span class="s1">&#39;ngconstant:development&#39;</span><span class="p">,</span> <span class="c1">// ADD THIS</span>
    <span class="s1">&#39;bower-install&#39;</span><span class="p">,</span>
    <span class="s1">&#39;concurrent:server&#39;</span><span class="p">,</span>
    <span class="s1">&#39;autoprefixer&#39;</span><span class="p">,</span>
    <span class="s1">&#39;connect:livereload&#39;</span><span class="p">,</span>
    <span class="s1">&#39;watch&#39;</span>
  <span class="p">]);</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>Here we tell Grunt to build the ng-constants for the <strong>development</strong> area. So whenever you boot up the local environment with <code>grunt serve</code>, it will write out the config file for the development target.</p>
<p>Likewise, we want to do the same for our production environment. Best place to do that is in our <code>grunt build</code> task:</p>
<pre><code><div class="highlight"><pre><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;build&#39;</span><span class="p">,</span> <span class="p">[</span>
  <span class="s1">&#39;clean:dist&#39;</span><span class="p">,</span>
  <span class="s1">&#39;ngconstant:production&#39;</span><span class="p">,</span> <span class="c1">// ADD THIS</span>
  <span class="s1">&#39;bower-install&#39;</span><span class="p">,</span>
  <span class="p">..</span> <span class="c1">// other build tasks</span>
<span class="p">]);</span>
</pre></div>
</code></pre>
<p>When Grunt runs the task, a config file is generated, with our constants:</p>
<pre><code><div class="highlight"><pre><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>

<span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;config&#39;</span><span class="p">,</span> <span class="p">[])</span>

<span class="p">.</span><span class="nx">constant</span><span class="p">(</span><span class="s1">&#39;ENV&#39;</span><span class="p">,</span> <span class="p">{</span>
  <span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="s1">&#39;development&#39;</span><span class="p">,</span>
  <span class="s1">&#39;apiEndpoint&#39;</span><span class="o">:</span> <span class="s1">&#39;http://your-development.api.endpoint:3000&#39;</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<h2><a name="using-the-config-file-in-your-app" class="anchor" href="#using-the-config-file-in-your-app"><span class="header-link"></span></a>Using the config file in your App</h2>
<p>So, now that we have a dynamic <code>config.js</code> file based on where we are, let&#39;s see how we can use it in our AngularJS App.</p>
<p>First thing to do is add the config file to our <code>index.html</code></p>
<pre><code><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;/scripts/config.js&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</code></pre>
<p>Next, we can inject it into our app:</p>
<pre><code><div class="highlight"><pre><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">,</span> <span class="p">[</span> <span class="s1">&#39;config&#39;</span> <span class="p">]);</span>
</pre></div>
</code></pre>
<p>And now, since config.js exposes an object <code>ENV</code> which is injected, whenever we need our ENV variables we can simply use them in our controllers by doing:</p>
<pre><code><div class="highlight"><pre><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MainCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$http</span><span class="p">,</span> <span class="nx">ENV</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// ENV is injected</span>

  <span class="nx">$scope</span><span class="p">.</span><span class="nx">login</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

    <span class="nx">$http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span>
      <span class="nx">ENV</span><span class="p">.</span><span class="nx">apiEndPoint</span><span class="p">,</span> <span class="c1">// Our environmental var :)</span>
      <span class="nx">$scope</span><span class="p">.</span><span class="nx">yourData</span>
    <span class="p">).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Cows&#39;</span><span class="p">);</span>
    <span class="p">});</span>

  <span class="p">};</span>

<span class="p">});</span>
</pre></div>
</code></pre>
<p>And there you have it. Environmental variables in your front-end. It might look like a lot of work, but once you&#39;ve set it up it&#39;s easy to extend the variables and duplicate environments to match your needs.</p>
<p>Happy coding.</p>
]]></description><link>http://mindthecode.com/how-to-use-environment-variables-in-your-angular-application/</link><guid isPermaLink="true">http://mindthecode.com/how-to-use-environment-variables-in-your-angular-application/</guid><category><![CDATA[angularjs]]></category><category><![CDATA[grunt]]></category><category><![CDATA[angular]]></category><dc:creator><![CDATA[Stef van den Ham]]></dc:creator><pubDate>Sun, 29 Dec 2013 07:30:00 GMT</pubDate></item><item><title><![CDATA[HTTPIe, a command line HTTP client]]></title><description><![CDATA[<p>Stumbled upon <strong><a href="https://github.com/jkbr/httpie">HTTPie</a></strong>, a command line HTTP client. It&#39;s pretty awesome. Basically it&#39;s Curl on steroids, as it has an easy interface and syntax highlighted output.</p>
<p>Here&#39;s an example of a simple GET request to the <a href="http://baconipsum.com/api/">Bacon Ipsum JSON service</a>:</p>
<p><img src="/images/screenshots/131208_http.png" alt="HTTPie"></p>
<p>Of course you can do actual useful stuff as well, such as POST-ing, Authentication, Cookies, Custom Headers, etc.</p>
<p>As the repo says, the main features are:</p>
<ul>
<li>Expressive and intuitive syntax</li>
<li>Formatted and colorized terminal output</li>
<li>Built-in JSON support</li>
<li>Forms and file uploads</li>
<li>HTTPS, proxies, and authentication</li>
<li>Arbitrary request data</li>
<li>Custom headers</li>
<li>Persistent sessions</li>
<li>Wget-like downloads</li>
<li>Python 2.6, 2.7 and 3.x support</li>
<li>Linux, Mac OS X and Windows support</li>
<li>Documentation</li>
<li>Test coverage</li>
</ul>
<p>I haven&#39;t played with it much yet, but so far it seems like a rather useful little tool, worth checking out.</p>
<p>You can get it <a href="https://github.com/jkbr/httpie">here</a></p>
]]></description><link>http://mindthecode.com/httpie-a-command-line-http-client/</link><guid isPermaLink="true">http://mindthecode.com/httpie-a-command-line-http-client/</guid><category><![CDATA[cli]]></category><category><![CDATA[http]]></category><category><![CDATA[client]]></category><dc:creator><![CDATA[Stef van den Ham]]></dc:creator><pubDate>Sun, 08 Dec 2013 13:00:00 GMT</pubDate></item><item><title><![CDATA[Blogging with CabinJS and Grunt]]></title><description><![CDATA[<p>I just want to mention <a href="http://www.cabinjs.com">CabinJS</a>. It took me all of 10 minutes to set it up, and another 10 to get the automatic deployment to Github Pages working. The other 4 hours this sunday I spent on <em>layouting</em>, <em>designing</em> and <em>tweaking</em> the blog you&#39;re reading now.</p>
<p>And that&#39;s pretty sweet.</p>
<p>There&#39;s quite a few <strong>static site generators</strong> on the market today, of which <a href="http://jekyllrb.com">Jekyll</a> probably is the most famous, but CabinJS elevates a minimalistic setup combined with Grunt tasks to a new level of awesomeness. You can focus on writing your posts, instead of configuring your generator.</p>
<p>If you&#39;re looking for a blog generator that uses Grunt for:</p>
<ul>
<li>Auto reloading</li>
<li>SASS compiling</li>
<li>Deploying to Github, Amazon S3 or FTP</li>
</ul>
<p>.. make sure to <a href="http://www.cabinjs.com">CabinJS</a> a try.</p>
]]></description><link>http://mindthecode.com/blogging-with-cabinjs-and-grunt/</link><guid isPermaLink="true">http://mindthecode.com/blogging-with-cabinjs-and-grunt/</guid><category><![CDATA[blogging]]></category><category><![CDATA[cabinjs]]></category><dc:creator><![CDATA[Stef van den Ham]]></dc:creator><pubDate>Sun, 08 Dec 2013 11:00:00 GMT</pubDate></item><item><title><![CDATA[A more colourful cat in your shell]]></title><description><![CDATA[<p>I just wanted to quickly share a shell alias I have been using lately to get some more color in the terminal when you cat a file.</p>
<!--more-->

<p>Below is a screenshot of what an <a href="/customize-the-terminal/">average terminal</a> looks like when you just use</p>
<pre><code><div class="highlight"><pre><span class="nx">$</span> <span class="nx">cat</span> <span class="nx">somefile</span><span class="p">.</span><span class="nx">js</span>
</pre></div>
</code></pre>
<p><img src="/images/screenshots/130806_terminal_dull.png" alt="Terminal Dull Colours" title="Terminal Dull Colours"></p>
<p>Sure, it does the job, and you probably are ok with it looking dull as hell. But what if you could make it look like this:</p>
<p><img src="/images/screenshots/130806_terminal_colour.png" alt="Terminal Colour" title="Terminal Colour"></p>
<p>Indeed! If you could, why wouldn&#39;t you?</p>
<h2><a name="the-ingredients" class="anchor" href="#the-ingredients"><span class="header-link"></span></a>The ingredients</h2>
<p>So, let&#39;s get to it. Luckily this isn&#39;t very complex to get going on your machine. Let&#39;s start by installing <a href="https://github.com/tmm1/pygments.rb">Pygments</a>. This little Ruby wrapper library is used to make the realtime syntax highlighting possible:</p>
<pre><code><div class="highlight"><pre><span class="nx">gem</span> <span class="nx">install</span> <span class="nx">pygments</span>
</pre></div>
</code></pre>
<p>Next up, the alias itself. Depending on your shell and environment open up your profile. If you aren&#39;t sure whether you&#39;ve installed or configured something specifically on your system, chances are the file you are looking for (on OSX at least) is <code>~/.bashrc</code>.</p>
<p>In there, add the following alias:</p>
<pre><code><div class="highlight"><pre><span class="nx">alias</span> <span class="nx">c</span><span class="o">=</span><span class="s1">&#39;pygmentize -O style=monokai -f console256 -g&#39;</span>
</pre></div>
</code></pre>
<p>And that&#39;s all there is to it. Now whenever you type <code>c some-file.ext</code> it will detect the extension and add syntax highlighting.</p>
<p>I chose the monokai style because it looks awesome and works well with the rest of my ZSH theme, but feel free to try a few and see which works best for you.</p>
<p>Happy CLI-ing!</p>
]]></description><link>http://mindthecode.com/a-more-colourful-cat-in-your-shell/</link><guid isPermaLink="true">http://mindthecode.com/a-more-colourful-cat-in-your-shell/</guid><category><![CDATA[terminal]]></category><category><![CDATA[command line]]></category><category><![CDATA[OSX]]></category><category><![CDATA[shell]]></category><dc:creator><![CDATA[Stef van den Ham]]></dc:creator><pubDate>Tue, 06 Aug 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Customize the terminal]]></title><description><![CDATA[<p>I love the terminal. Besides the fact it makes you look awesome while using it, it can also do about a gazillion different things. Most of them useful.</p>
<p>One thing is for sure, while developing webapps I have it running all the time and spend a lot of time running commands and monitoring output. So why not make it look as pretty as it is awesome? In this short walkthrough I&#39;ll explain how to customize the terminal to make it look like mine, but make sure you fiddle with the settings so it works best for you.</p>
<!--more-->

<h2><a name="what-we-will-be-making" class="anchor" href="#what-we-will-be-making"><span class="header-link"></span></a>What we will be making</h2>
<p>Below is a screenshot of what my terminal looks like:</p>
<p><a href="/images/screenshots/custom-terminal.png"><img src="/images/screenshots/custom-terminal.png" alt="Custom Terminal" title="Custom Terminal"></a></p>
<p>That&#39;s right, besides the beautiful colour-scheme it also visually tells you what git branch you&#39;re in and information about its status.</p>
<h2><a name="the-ingredients" class="anchor" href="#the-ingredients"><span class="header-link"></span></a>The ingredients</h2>
<p>So, let&#39;s get to it. We will be needing a few things to set up the basis, and will then start fiddling with settings.</p>
<h3><a name="colour-theme" class="anchor" href="#colour-theme"><span class="header-link"></span></a>Colour theme</h3>
<p>The theme I&#39;m using is <strong>Tomorrow Night</strong>. I use it for my every day coding, so it made sense to propagate those colours into the terminal. <a href="https://github.com/chriskempson">Chris Kempson</a> did an amazing job at making this theme available for pretty much everything out there, so <a href="https://github.com/chriskempson/tomorrow-theme/blob/master/OS%20X%20Terminal/Tomorrow%20Night.terminal">grab the Terminal version</a> here.</p>
<p>Download this file and put it in a folder that makes sense.</p>
<p>Once you&#39;ve done that, simply double click the file and it will open a terminal window with the new theme active. Next go to <code>Preferences</code> by hitting <code>Command-.</code></p>
<p>In the <code>Settings</code> tab you will see a list of themes, including your fresh <code>Tomorrow Night</code> one. Make sure to make it the <code>Default</code> one.</p>
<h3><a name="font" class="anchor" href="#font"><span class="header-link"></span></a>Font</h3>
<p>Choosing a font is the most important thing, because, if you&#39;re anything like me, you spend a hell of a lot of time looking at it. For the last 4 months I&#39;ve been using <code>Monaco 12pt</code>. Make sure to select the font you like to work with in the Theme Settings.</p>
<h3><a name="zsh" class="anchor" href="#zsh"><span class="header-link"></span></a>ZSH</h3>
<p>I recently got to know <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a>, which as Robby describes it, is:</p>
<p>&quot;A handful of functions, auto-complete helpers, and stuff that makes you shout..</p>
<pre><code><div class="highlight"><pre><span class="s1">&#39;OH MY ZSHELL!&#39;</span>
</pre></div>
</code></pre>
<p>To get it working you first have to change the shell you&#39;re working in. By default OSX users get the <code>/bin/bash</code> shell. ZSH is pretty much the same, but comes with quite a few handy additions to make it cool enough to use. To change your shell to zsh simply go:</p>
<ul>
<li>System Preferences</li>
<li>Users &amp; Groups</li>
<li>Right click your user account and select <code>Advanced Options</code> (You might have to click the little lock first)</li>
<li>Change <code>/bin/bash/</code> to <code>/bin/zsh</code> in the Login Shell dropdown</li>
<li>Save your changes</li>
</ul>
<p>Next, to get oh-my-zsh working, they have provided a nice one-line install script which you run, of course, in the terminal:</p>
<p>{% highlight bash %}
$ curl -L <a href="https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh">https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh</a> | sh
{% endhighlight %}</p>
<h3><a name="preparing-the-zsh-theme" class="anchor" href="#preparing-the-zsh-theme"><span class="header-link"></span></a>Preparing the ZSH theme</h3>
<p>We&#39;re almost there! Next up is creating a theme for zsh to get the prompt to work and look the way we want. Oh My ZSH was installed into <code>~/.oh-my-zsh</code> so open up that folder. You will see it has a lot of <code>themes</code> ready. What we want to look at first though is the <code>zshrc.zsh-template</code> file in the <code>templates</code> folder. If you&#39;ve ever did any terminal customisation you might be familiar with a file called <code>.bashrc</code>. This is pretty much the same thing, but for .. you guessed it: zsh</p>
<p>So open up that <code>zshrc.zsh-template</code> file and find the line that says <code>ZSH_THEME=&quot;robbyrussell&quot;</code></p>
<p>We will create our own theme so replace the theme name with your own theme name. For instance: <code>ZSH_THEME=&quot;sheeptheme&quot;</code>.</p>
<p>Save this file as <code>~/.zshrc</code>. Go to the <code>themes</code> folder again, and create a new file called <code>sheeptheme.zsh-theme</code>, or whatever title you gave your theme.</p>
<h3><a name="creating-your-custom-zsh-theme" class="anchor" href="#creating-your-custom-zsh-theme"><span class="header-link"></span></a>Creating your custom ZSH theme</h3>
<p>Now the fun part. Making it all yours. Open up the theme file you created, and put the following inside:</p>
<pre><code><div class="highlight"><pre><span class="kd">function</span> <span class="nx">git_prompt_info</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">ref</span><span class="o">=</span><span class="nx">$</span><span class="p">(</span><span class="nx">git</span> <span class="nx">symbolic</span><span class="o">-</span><span class="nx">ref</span> <span class="nx">HEAD</span> <span class="mi">2</span><span class="o">&gt;</span> <span class="err">/dev/null) || return</span>
  <span class="nx">echo</span> <span class="s2">&quot;$(parse_git_dirty)$ZSH_THEME_GIT_PROMPT_PREFIX$(current_branch)$ZSH_THEME_GIT_PROMPT_SUFFIX&quot;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">get_pwd</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">print</span> <span class="o">-</span><span class="nx">D</span> <span class="nx">$PWD</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">put_spacing</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">local</span> <span class="nx">git</span><span class="o">=</span><span class="nx">$</span><span class="p">(</span><span class="nx">git_prompt_info</span><span class="p">)</span>
  <span class="k">if</span> <span class="p">[</span> <span class="nx">$</span><span class="p">{</span><span class="err">#</span><span class="nx">git</span><span class="p">}</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">];</span> <span class="nx">then</span>
    <span class="p">((</span><span class="nx">git</span><span class="o">=</span><span class="nx">$</span><span class="p">{</span><span class="err">#</span><span class="nx">git</span><span class="p">}</span> <span class="o">-</span> <span class="mi">10</span><span class="p">))</span>
  <span class="k">else</span>
    <span class="nx">git</span><span class="o">=</span><span class="mi">0</span>
  <span class="nx">fi</span>

  <span class="nx">local</span> <span class="nx">termwidth</span>
  <span class="p">((</span> <span class="nx">termwidth</span> <span class="o">=</span> <span class="nx">$</span><span class="p">{</span><span class="nx">COLUMNS</span><span class="p">}</span> <span class="o">-</span> <span class="mi">3</span> <span class="o">-</span> <span class="nx">$</span><span class="p">{</span><span class="err">#</span><span class="nx">HOST</span><span class="p">}</span> <span class="o">-</span> <span class="nx">$</span><span class="p">{</span><span class="err">#</span><span class="nx">$</span><span class="p">(</span><span class="nx">get_pwd</span><span class="p">)}</span> <span class="o">-</span> <span class="nx">$</span><span class="p">{</span><span class="nx">bat</span><span class="p">}</span> <span class="o">-</span> <span class="nx">$</span><span class="p">{</span><span class="nx">git</span><span class="p">}</span> <span class="p">))</span>

  <span class="nx">local</span> <span class="nx">spacing</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
  <span class="k">for</span> <span class="nx">i</span> <span class="k">in</span> <span class="p">{</span><span class="mi">1</span><span class="p">..</span><span class="nx">$termwidth</span><span class="p">};</span> <span class="k">do</span>
    <span class="nx">spacing</span><span class="o">=</span><span class="s2">&quot;${spacing} &quot;</span>
  <span class="nx">done</span>
  <span class="nx">echo</span> <span class="nx">$spacing</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">precmd</span><span class="p">()</span> <span class="p">{</span>
<span class="nx">print</span> <span class="o">-</span><span class="nx">rP</span> <span class="s1">&#39;</span>
<span class="s1">$fg[cyan]%m: $fg[yellow]$(get_pwd)$(put_spacing)$(git_prompt_info)&#39;</span>
<span class="p">}</span>

<span class="nx">PROMPT</span><span class="o">=</span><span class="s1">&#39;%{$reset_color%} &#39;</span>

<span class="nx">ZSH_THEME_GIT_PROMPT_PREFIX</span><span class="o">=</span><span class="s2">&quot;[git:&quot;</span>
<span class="nx">ZSH_THEME_GIT_PROMPT_SUFFIX</span><span class="o">=</span><span class="s2">&quot;]$reset_color&quot;</span>
<span class="nx">ZSH_THEME_GIT_PROMPT_DIRTY</span><span class="o">=</span><span class="s2">&quot;$fg[red]+&quot;</span>
<span class="nx">ZSH_THEME_GIT_PROMPT_CLEAN</span><span class="o">=</span><span class="s2">&quot;$fg[green]&quot;</span>
</pre></div>
</code></pre>
<p>The above will probably be pretty self-explanatory, we got a function to get the Git information from the current folder, so we can determin if it&#39;s dirty. A function to get the current directory. And a function to determin how much space to put between the first part of the prompt and the last part (the git part) so that it aligns nicely.</p>
<h2><a name="extending-even-more" class="anchor" href="#extending-even-more"><span class="header-link"></span></a>Extending even more</h2>
<p>You will probably find it doesn&#39;t <strong>exactly</strong> fit your exact needs, and I would encourage you to fiddle with it as long and as much until you are happy with it. You can find a lot of nice plugins in the <code>/.oh-my-zsh</code> directory to play around with, so please do.</p>
<h2><a name="conslusion" class="anchor" href="#conslusion"><span class="header-link"></span></a>Conslusion</h2>
<p>A good prompt comes down to personal preference. I hope you can make yours look the way you want and that the above was a good starting point to get there.</p>
<p>Happy CLI-ing!</p>
]]></description><link>http://mindthecode.com/customize-the-terminal/</link><guid isPermaLink="true">http://mindthecode.com/customize-the-terminal/</guid><category><![CDATA[terminal]]></category><category><![CDATA[command line]]></category><category><![CDATA[OSX]]></category><dc:creator><![CDATA[Stef van den Ham]]></dc:creator><pubDate>Thu, 28 Feb 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Getting used to Vim]]></title><description><![CDATA[<p>So there we go. Writing this post in vim. Macvim to be exact. Trying not to touch the arrow keys, not use the h-j-k-l too extensively either, work with A and I a lot, and generally trying not to cock things up too much by hitting the wrong commands.</p>
<!--more-->

<p>So why do I willingly put myself through the torture of using the monster that is Vim? Well, just like a lot of developers out there, I&#39;ve had a long time desire to be able to use Vim properly. No immediate need, just a personal goal if you will. I&#39;ve tried Vim a couple of times over the last few months, but pretty much every attempt lead quickly to being overwhelmed by all the different commands and feeling about a gazillion times slower as I did when using Sublime Text Edit 2.</p>
<h3><a name="new-tactic" class="anchor" href="#new-tactic"><span class="header-link"></span></a>New tactic</h3>
<p>The new plan is not as exciting or brilliant as one might hope, but it&#39;s one that might just work: <em>Forceful editing</em>
What? Well, it&#39;s simple really .. whenever I was trying out Vim and found myself having to actually &quot;quickly&quot; edit a file or whip up some code I switched to my trustworthy Sublime. This time around I&#39;m going to force myself to stay in Vim. This will slow me down at first. A lot. And it will probably lead to some cursing and frustration. But I guess it&#39;s the only way to learn.</p>
<p>So here we go, I&#39;ve written this post in Vim, the keyboard is still intact, I haven&#39;t cursed and screamed more than usual, so I suppose we&#39;re off to a good start.</p>
<p>As a bonus I&#39;ve decided I&#39;ll keep you guys informed of my progress and share my findings, tips and useful plugins I might stumble upon whilst enduring this ordeal :)</p>
<p>If any of you are already using Vim and have some tips or tricks, let us know!</p>
<p>For now all that&#39;s left is to save, commit and push this file .. all from within Vim!</p>
<p>I like.</p>
]]></description><link>http://mindthecode.com/getting-used-to-vim/</link><guid isPermaLink="true">http://mindthecode.com/getting-used-to-vim/</guid><category><![CDATA[vim]]></category><dc:creator><![CDATA[Stef van den Ham]]></dc:creator><pubDate>Sat, 09 Feb 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Updated the PHPUnit CakePHP installer]]></title><description><![CDATA[<p>Just a quick note, the CakePHP PHPUnit installer has been updated to use version 3.7.8. Go grab it <a href="https://github.com/Hyra/PHPUnit-Cake2">here</a> if you are no fan of PEAR and want a self contained PHPUnit testing system.</p>
<p>Works on Mac OSX, Linux and Windows.</p>
]]></description><link>http://mindthecode.com/updated-the-phpunit-cakephp-installer/</link><guid isPermaLink="true">http://mindthecode.com/updated-the-phpunit-cakephp-installer/</guid><dc:creator><![CDATA[Stef van den Ham]]></dc:creator><pubDate>Tue, 06 Nov 2012 00:00:00 GMT</pubDate></item></channel></rss>
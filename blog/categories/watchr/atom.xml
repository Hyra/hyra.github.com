<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: WatchR | Mindthecode - Rambling about code]]></title>
  <link href="http://mindthecode.com/blog/categories/watchr/atom.xml" rel="self"/>
  <link href="http://mindthecode.com/"/>
  <updated>2012-11-01T09:33:23+01:00</updated>
  <id>http://mindthecode.com/</id>
  <author>
    <name><![CDATA[Stef van den Ham]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Good times with Watchr, Coffeescript and LESS]]></title>
    <link href="http://mindthecode.com/good-times-with-watchr-coffeescript-and-less/"/>
    <updated>2012-05-16T07:59:00+02:00</updated>
    <id>http://mindthecode.com/good-times-with-watchr-coffeescript-and-less</id>
    <content type="html"><![CDATA[<p>I have been working on a pure HTML front-end for one of the pet projects I'm doing. A lot of fun, but while developing, running the terminal commands to compile both the .less and .coffee files gets a tad tedious. <a href="https://github.com/mynyml/watchr">"Watchr"</a> to the rescue! With this little gem you can watch specific folders or file extensions and run commands based on the files you watch.</p>

<p>Here is how I got it set up now ..</p>

<!--more-->


<h2>Installing watchr</h2>

<p>First of all we need to get the Watchr gem installed. Assuming you have a Mac and got XCode (or at least the tools) installed, this is pretty simple:</p>

<pre><code>→ gem install watchr
</code></pre>

<h2>Installing coffeescript</h2>

<p>Another easy one ..</p>

<pre><code>→ npm install -g coffee-script
</code></pre>

<p>Don't forget the <code>-g</code> flag as you (probably) want it to be installed globally.</p>

<h2>Installing the LESS compiler</h2>

<p>You got the hang of it now, it's as easy as ..</p>

<pre><code>npm install -g less
</code></pre>

<h2>The fun part!</h2>

<p>Now we're ready for the fun bit, setting up watchr to do some automagic stuff.</p>

<p>I have a typical folder structure, with the exception of a new <code>_src</code> folder which will contain all the raw coffeescript and less files.</p>

<pre><code>/index.html
/css
/js
/img
/_src
    /less
    /coffee
</code></pre>

<p>Watchr works with a config file, which basically tells it what to watch for, and what to do if it finds any changes. I placed the file inside the <code>_src</code> folder and named it <code>watchr.rb</code></p>

<p>Here's my config file at the moment:</p>

<pre><code>def compile_less
    %x[lessc less/bootstrap/bootstrap.less ../css/main.css --yui-compress]
end

def compile_coffee
    %x[coffee -c -j ../js/app.js coffee/]
end

def do_growl(message)
    growlnotify = `which growlnotify`.chomp
  title = "Watchr Message"
  passed = message.include?('0 failures, 0 errors')
  image = passed ? "~/.watchr_images/passed.png" : "~/.watchr_images/failed.png"
  severity = passed ? "-1" : "1"
  options = "-w -n Watchr --image '#{File.expand_path(image)}'"
  options &lt;&lt; " -m '#{message}' '#{title}' -p #{severity}"
  system %(#{growlnotify} #{options} &amp;)
end

do_growl "Watching folders and waiting for changes .."

watch('less/*') { |m|
    # Recompile LESS files
    compile_less
    do_growl "LESS Compiled and Compressed!"
}

watch('coffee/*') { |m|
    # Recompile Coffeescripts
    compile_coffee
    do_growl "Coffeescripts compiled and concatenated!"
}
</code></pre>

<p>As you can see at the bottom I'm watching the 2 folders seperately, as I want to run different commands for them. For the project I'm working on I'm using Twitter Bootstrap, so rather than compiling all the .less files to seperate .css files I just want to compiled bootstrap.less as that @imports all the things it needs. When it's done with that it yui-compresses the lot and writes the output to <code>css/main.css</code>. Pretty cool!</p>

<p>The compile_coffee command does something pretty similar. Whenever a .coffee file in the coffee folder changes it will compile them all and combine the output (notice the <code>-j</code> flag) and write it to <code>js/app.js</code>.</p>

<p>To get the show on the road, cd to the _src folder, and run:</p>

<pre><code>watchr watchr.rb
</code></pre>

<p>You may have noticed the <code>do_growl</code> function, which doesn't really add value except that it's just cool to get a Growl message whenever it has done it's thing. To get that bit working you have to install <a href="http://growl.info/extras.php#growlnotify">"Growl Notify"</a>.</p>

<p>If you're not that interested, or you don't have a Mac with Growl simply remove the function and the do_growl calls from the watch patterns.</p>

<p>I'm sure I could optimize this a bit, and add variables for output folders and options, but for now it's simple, working, and pretty damn cool.</p>

<p>Let me know how you get your watchr set up!</p>
]]></content>
  </entry>
  
</feed>
